// Начало кода алгоритма обработки сырых данных
ВидСправочника = нсиАлгоритмыОбработкиДанныхЗаявокСервер.ПолучитьДополнительныеСвойстваСырыхДанных(Параметры.ИдентификаторСыройЗаписи).получить("ВидСправочника");
СтрокаПодлюченияПодписчик = нсиАлгоритмыОбработкиДанныхЗаявокСервер.ПолучитьДополнительныеСвойстваСырыхДанных(Параметры.ИдентификаторСыройЗаписи).получить("Подписчик");
если ВидСправочника = "СтатьиЗатрат" тогда
	
	xdtoОбъектОбработки = ПолучитьОбъектXDTO(ОбъектОбработки);
	
	РезультатВыполнения = Новый Массив;
	
	пМетаданные = ПолучитьМетаданные(ПараметрыАлгоритма.ВидЗаявкиСЗ);
	
	Заявки = ПолучитьЗарегистрированныеЗаявки(Параметры.ИдентификаторСыройЗаписи);
	Если Заявки.ВГраница() > 0 тогда
		Для Инд = 0 по Заявки.ВГраница() Цикл
			ЗаявкаОбъект = Заявки[0].ПолучитьОбъект();
			Если ЗаявкаОбъект.Стартован тогда
				ВызватьИсключение СтрШаблон("Заявка ""%1"" стартована и не может быть помечена на удаление.", Строка(Заявки[Инд]))
			ИначеЕсли ЗаявкаОбъект.Завершен тогда
				ВызватьИсключение СтрШаблон("Заявка ""%1"" завершена и не может быть помечена на удаление.", Строка(Заявки[Инд]))
			Иначе
				ЗаявкаОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбъектОбработкиЗаявки = ПолучитьСписок("Строка", xdtoОбъектОбработки);
	Если Не ОбъектОбработкиЗаявки = Неопределено тогда
		Для Инд = 0 по ОбъектОбработкиЗаявки.Количество() - 1 цикл
			xdtoОбъект = ОбъектОбработкиЗаявки.Получить(Инд);
			пОбъект = нсиДанныеЗаявок.ПолучитьПустойОбъект(пМетаданные);
			
			пОбъект.Код_Подписчика = ПолучитьЗначениеСвойства("Код", xdtoОбъект, пМетаданные, "Код");
			пОбъект.Наименование = ПолучитьЗначениеСвойства("Наименование", xdtoОбъект, пМетаданные, "Наименование");
			
			//Поиск по наименованию вид деятельности
			ЗначениеСырыхДанных = xdtoОбъект.Получить("ВидДеятельностиДляНалоговогоУчетаЗатрат");
			Если ЗначениеСырыхДанных = Неопределено Или ТипЗнч(ЗначениеСырыхДанных) = Тип("ОбъектXDTO") тогда
			иначе
				ВладелецВидДеятельностиДляНалоговогоУчетаЗатрат = Справочники.нсиВидыСправочников.НайтиПоНаименованию("Виды деятельности для налогового учета затрат", истина);
				Значение = Справочники.нсиУниверсальныйКлассификатор.НайтиПоНаименованию(ЗначениеСырыхДанных, истина, , ВладелецВидДеятельностиДляНалоговогоУчетаЗатрат);
				//Если Значение = Справочники.нсиУниверсальныйКлассификатор.ПустаяСсылка() тогда
				//	Значение = Справочники.нсиУниверсальныйКлассификатор.СоздатьЭлемент();
				//	Значение.Владелец = ВладелецВидДеятельностиДляНалоговогоУчетаЗатрат;
				//	Значение.Наименование = ЗначениеСырыхДанных;
				//	значение.ОбменДанными.Загрузка = истина;
				//	значение.Записать();
				//	значение = значение.Ссылка;
				//конецесли;
				//пОбъект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Значение;
			КонецЕсли;
			
			//Поиск по наименованию вид расходов
			ЗначениеСырыхДанных = xdtoОбъект.Получить("ВидРасходовНУ");
			ЗначениеСырыхДанныхВидРасходовНУ = xdtoОбъект.Получить("ВидРасходовНУ");
			Если ЗначениеСырыхДанных = Неопределено Или ТипЗнч(ЗначениеСырыхДанных) = Тип("ОбъектXDTO") тогда
			иначе
				ВладелецВидДеятельностиДляНалоговогоУчетаЗатрат = Справочники.нсиВидыСправочников.НайтиПоНаименованию("Виды расходов НУ", истина);
				Значение = Справочники.нсиУниверсальныйКлассификатор.НайтиПоНаименованию(ЗначениеСырыхДанных, Истина, , ВладелецВидДеятельностиДляНалоговогоУчетаЗатрат);
				//Если Значение = Справочники.нсиУниверсальныйКлассификатор.ПустаяСсылка() тогда
				//	Значение = Справочники.нсиУниверсальныйКлассификатор.СоздатьЭлемент();
				//	Значение.Владелец = ВладелецВидДеятельностиДляНалоговогоУчетаЗатрат;
				//	Значение.Наименование = ЗначениеСырыхДанных;
				//	значение.ОбменДанными.Загрузка = истина;
				//	значение.Записать();
				//	значение = значение.Ссылка;
				//конецесли;
				пОбъект.ВидРасходовНУ = Значение;
			КонецЕсли;
			
			пОбъект.РеквизитДопУпорядочивания = ПолучитьЗначениеСвойства("РеквизитДопУпорядочивания", xdtoОбъект, пМетаданные, "РеквизитДопУпорядочивания");
			пОбъект.КС_Неактуально = ПолучитьЗначениеСвойства("КС_Неактуально", xdtoОбъект, пМетаданные, "КС_Неактуально");
			пОбъект.КС_ДатаОкончанияАктуальности = ПолучитьЗначениеСвойства("КС_ДатаОкончанияАктуальности", xdtoОбъект, пМетаданные, "КС_ДатаОкончанияАктуальности");
			пОбъект.КС_КодСтатьи = ПолучитьЗначениеСвойства("КС_КодСтатьи", xdtoОбъект, пМетаданные, "КС_КодСтатьи");
			пОбъект.КС_Комментарий = ПолучитьЗначениеСвойства("КС_Комментарий", xdtoОбъект, пМетаданные, "КС_Комментарий");
			//пОбъект.КодMDM = ПолучитьЗначениеСвойства("КодMDM", xdtoОбъект, пМетаданные, "КодMDM");
			//пОбъект.НсиРучная = ПолучитьЗначениеСвойства("НсиРучная", xdtoОбъект, пМетаданные, "НсиРучная");
			пОбъект.GUID = ПолучитьЗначениеСвойства("GUID", xdtoОбъект, пМетаданные, "GUID");
			
			//Поиск подписчика
			пОбъект.Подписчик = Справочники.БИТ_Подписчики.НайтиПоРеквизиту("СтрокаПодключения", СтрокаПодлюченияПодписчик);
			
			//Поиск эталона статья затрат
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ 
				|	нсиУниверсальныйКлассификатор.Ссылка КАК Ссылка, 
				|	нсиУниверсальныйКлассификатор.MDM_Key КАК MDM_Key 
				|ИЗ 
				|	Справочник.нсиВидыСправочников.Реквизиты КАК нсиВидыСправочниковРеквизиты 
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.нсиХранилищеСсылка КАК нсиХранилищеСтрока 
				|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.нсиУниверсальныйФункциональныйСправочник КАК нсиУниверсальныйКлассификатор 
				|			ПО нсиХранилищеСтрока.Элемент = нсиУниверсальныйКлассификатор.Идентификатор 
				|		ПО (нсиХранилищеСтрока.ВидСправочника = нсиВидыСправочниковРеквизиты.Ссылка) 
				|ГДЕ 
				|	нсиХранилищеСтрока.Значение = &ЗначениеВидРасходов 
				|	И нсиУниверсальныйКлассификатор.Наименование = &Наименование 
				|	И нсиВидыСправочниковРеквизиты.Имя = &НаименованиеРеквизита";
			
			Запрос.УстановитьПараметр("ЗначениеВидРасходов", пОбъект.ВидРасходовНУ);
			Запрос.УстановитьПараметр("Наименование", пОбъект.Наименование);
			Запрос.УстановитьПараметр("НаименованиеРеквизита", "ВидРасходовНУ");
			//Запрос.УстановитьПараметр("Статус", перечисления.нсиСтатусыОбъектаСправочника.Эталон);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			если ВыборкаДетальныеЗаписи.Следующий() тогда
				пОбъект.ДублирующаяПозиция = истина;
				пОбъект.ЭталонныйЭлемент = ВыборкаДетальныеЗаписи.Ссылка;
				пОбъект.MDM_Key = ВыборкаДетальныеЗаписи.MDM_Key;
			иначе
				пОбъект.ДублирующаяПозиция = Ложь;
			Конецесли;
			
			Если Заявки.ВГраница() = 0 тогда
				ЗаявкаОбъект = Заявки[0].ПолучитьОбъект();
				ЗаявкаСсылка = ЗаписатьЗаявку(ЗаявкаОбъект, пМетаданные, пОбъект);
			Иначе
				ЗаявкаСсылка = СоздатьЗаявку(ПараметрыАлгоритма.ВидЗаявкиСЗ, пМетаданные, пОбъект);
			КонецЕсли;
			РезультатВыполнения.Добавить(ЗаявкаСсылка);
			
			если пОбъект.ДублирующаяПозиция тогда
				//Источник = новый структура();
				//источник.Вставить("нсиЗаявка", ЗаявкаСсылка);
				ЭталонныйЭлемент = пОбъект.ЭталонныйЭлемент.ссылка;
				//Если ЭталонныйЭлемент.ДополнительныеСвойства.Свойство("Данные") Тогда
				//	РеквизитыСтатьиЗатрат = ЭталонныйЭлемент.ДополнительныеСвойства.Данные;
				//Иначе
				пМетаданные = нсиУниверсальноеХранилище.ПолучитьМетаданные(ЭталонныйЭлемент.Владелец);
				РеквизитыСтатьиЗатрат = нсиУниверсальноеХранилище.ПолучитьОбъект(пМетаданные, ЭталонныйЭлемент.Ссылка);
				//КонецЕсли;
				
				ЭлементСтатьиЗатрат = Новый Структура;
				ЭлементСтатьиЗатрат.Вставить("ВидСправочника", "СтатьиЗатрат");
				ЭлементСтатьиЗатрат.Вставить("ДублирующаяПозиция", Истина);
				ЭлементСтатьиЗатрат.Вставить("GUID", Строка(пОбъект.GUID));
				ЭлементСтатьиЗатрат.Вставить("ПометкаУдаления", РеквизитыСтатьиЗатрат.ПометкаУдаления);
				ЭлементСтатьиЗатрат.Вставить("Код", пОбъект.Код_Подписчика);
				ЭлементСтатьиЗатрат.Вставить("Наименование", РеквизитыСтатьиЗатрат.Наименование);
				Если ЭталонныйЭлемент.Родитель = неопределено тогда
					ЭлементСтатьиЗатрат.Вставить("Родитель", "");
				иначе
					ЭлементСтатьиЗатрат.Вставить("Родитель", Строка(РеквизитыСтатьиЗатрат.Родитель.Наименование));
				конецесли;
				ЭлементСтатьиЗатрат.Вставить("ЭтоГруппа", РеквизитыСтатьиЗатрат.ЭтоГруппа);
				
				ЭлементСтатьиЗатрат.Вставить("КС_КодСтатьи", РеквизитыСтатьиЗатрат.КС_КодСтатьи);
				Если НЕ РеквизитыСтатьиЗатрат.ЭтоГруппа Тогда
					
					ЭлементСтатьиЗатрат.Вставить("ВидДеятельностиДляНалоговогоУчетаЗатрат", ?(ЗначениеЗаполнено(РеквизитыСтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат), РеквизитыСтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат.Наименование, ""));
					ЭлементСтатьиЗатрат.Вставить("ВидРасходовНУ", ?(ЗначениеЗаполнено(РеквизитыСтатьиЗатрат.ВидРасходовНУ), РеквизитыСтатьиЗатрат.ВидРасходовНУ.Наименование, ""));
					ЭлементСтатьиЗатрат.Вставить("РеквизитДопУпорядочивания", ?(ЗначениеЗаполнено(РеквизитыСтатьиЗатрат.РеквизитДопУпорядочивания), РеквизитыСтатьиЗатрат.РеквизитДопУпорядочивания, ""));
					
					ЭлементСтатьиЗатрат.Вставить("КодMDM", ЭталонныйЭлемент.Код);
					ЭлементСтатьиЗатрат.Вставить("MDM_Key", ?(ЗначениеЗаполнено(ЭталонныйЭлемент.MDM_Key), ЭталонныйЭлемент.MDM_Key, ""));
					//ЭлементСтатьиЗатрат.Вставить("НсиРучная", ЭталонныйЭлемент.нсиРучноеИзменение);
					ЭлементСтатьиЗатрат.Вставить("КС_Неактуально", ?(ЗначениеЗаполнено(РеквизитыСтатьиЗатрат.КС_Неактуально), РеквизитыСтатьиЗатрат.КС_Неактуально, ""));
					ЭлементСтатьиЗатрат.Вставить("КС_ДатаОкончанияАктуальности", ?(ЗначениеЗаполнено(РеквизитыСтатьиЗатрат.КС_ДатаОкончанияАктуальности), РеквизитыСтатьиЗатрат.КС_ДатаОкончанияАктуальности, ""));
					ЭлементСтатьиЗатрат.Вставить("КС_Комментарий", ?(ЗначениеЗаполнено(РеквизитыСтатьиЗатрат.КС_Комментарий), РеквизитыСтатьиЗатрат.КС_Комментарий, ""));
					
					КС_ПереченьСчетов = Новый Массив;
					Для Каждого Стр Из РеквизитыСтатьиЗатрат.КС_ПереченьСчетов Цикл
						НовСтр = Новый Структура;
						НовСтр.Вставить("ИспользуетсяВУчете", Стр.ИспользуетсяВУчете);
						НовСтр.Вставить("Счет", СокрЛП(Стр.Счет.Код));
						НовСтр.Вставить("НаименованиеСчета", Стр.НаименованиеСчета);
						
						КС_ПереченьСчетов.Добавить(НовСтр);
					КонецЦикла;
					ЭлементСтатьиЗатрат.Вставить("КС_ПереченьСчетов", КС_ПереченьСчетов);
				КонецЕсли;
				
				ЗаписьJson = Новый ЗаписьJSON;
				ПараметрыЗаписиJson = Новый ПараметрыЗаписиJSON( , Символы.Таб);
				ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJson);
				
				ЗаписатьJSON(ЗаписьJson, ЭлементСтатьиЗатрат);
				СтрокаJSon = ЗаписьJson.Закрыть();
				
				//ОпределитьПолучателейИСоздатьИсходящиеСообщения(ВидСправочника, СтрокаJSon);
				СтатьиЗатрат = Справочники.нсиВидыСправочников.НайтиПоНаименованию("Статьи затрат", Истина);
				//БИТ_ФормированиеСообщений.ОпределитьПолучателейИСоздатьИсходящиеСообщения(СтатьиЗатрат, СтрокаJSon,,пОбъект.Подписчик);
				ЗаписьИзмененныйОбъект = РегистрыСведений.БИТ_КонтрольОбменаНормализация.СоздатьМенеджерЗаписи();
				ЗаписьИзмененныйОбъект.Объект = пОбъект.ЭталонныйЭлемент;
				ЗаписьИзмененныйОбъект.ДатаВремяСобытия = ТекущаяДата();
				ЗаписьИзмененныйОбъект.ИДСырыеДанные = Параметры.ИдентификаторСыройЗаписи;
				ЗаписьИзмененныйОбъект.Записать();
			конецесли;
			
		КонецЦикла;
	КонецЕсли;
КонецЕсли;

//Прочие доходы и расходы создание заявки
если ВидСправочника = "ПрочиеДоходыИРасходы" тогда
	
	xdtoОбъектОбработки = ПолучитьОбъектXDTO(ОбъектОбработки);
	
	РезультатВыполнения = Новый Массив;
	
	пМетаданные = ПолучитьМетаданные(ПараметрыАлгоритма.ВидЗаявкиПДР);
	
	Заявки = ПолучитьЗарегистрированныеЗаявки(Параметры.ИдентификаторСыройЗаписи);
	Если Заявки.ВГраница() > 0 тогда
		Для Инд = 0 по Заявки.ВГраница() Цикл
			ЗаявкаОбъект = Заявки[0].ПолучитьОбъект();
			Если ЗаявкаОбъект.Стартован тогда
				ВызватьИсключение СтрШаблон("Заявка ""%1"" стартована и не может быть помечена на удаление.", Строка(Заявки[Инд]))
			ИначеЕсли ЗаявкаОбъект.Завершен тогда
				ВызватьИсключение СтрШаблон("Заявка ""%1"" завершена и не может быть помечена на удаление.", Строка(Заявки[Инд]))
			Иначе
				ЗаявкаОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбъектОбработкиЗаявки = ПолучитьСписок("Строка", xdtoОбъектОбработки);
	Если Не ОбъектОбработкиЗаявки = Неопределено тогда
		Для Инд = 0 по ОбъектОбработкиЗаявки.Количество() - 1 цикл
			xdtoОбъект = ОбъектОбработкиЗаявки.Получить(Инд);
			пОбъект = нсиДанныеЗаявок.ПолучитьПустойОбъект(пМетаданные);
			
			пОбъект.Код_Подписчика = ПолучитьЗначениеСвойства("Код", xdtoОбъект, пМетаданные, "Код");
			пОбъект.Наименование = ПолучитьЗначениеСвойства("Наименование", xdtoОбъект, пМетаданные, "Наименование");
			
			//Поиск по наименованию вид деятельности
			ЗначениеСырыхДанных = xdtoОбъект.Получить("ВидДеятельностиДляНалоговогоУчетаЗатрат");
			Если ЗначениеСырыхДанных = Неопределено Или ТипЗнч(ЗначениеСырыхДанных) = Тип("ОбъектXDTO") тогда
			иначе
				ВладелецВидДеятельностиДляНалоговогоУчетаЗатрат = Справочники.нсиВидыСправочников.НайтиПоНаименованию("Виды деятельности для налогового учета затрат", истина);
				Значение = Справочники.нсиУниверсальныйКлассификатор.НайтиПоНаименованию(ЗначениеСырыхДанных, Истина, , ВладелецВидДеятельностиДляНалоговогоУчетаЗатрат);
				//Если Значение = Справочники.нсиУниверсальныйКлассификатор.ПустаяСсылка() тогда
				//	Значение = Справочники.нсиУниверсальныйКлассификатор.СоздатьЭлемент();
				//	Значение.Владелец = ВладелецВидДеятельностиДляНалоговогоУчетаЗатрат;
				//	Значение.Наименование = ЗначениеСырыхДанных;
				//	значение.ОбменДанными.Загрузка = истина;
				//	значение.Записать();
				//	значение = значение.Ссылка;
				//конецесли;
				//пОбъект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Значение;
			КонецЕсли;
			
			//Поиск по наименованию ВидПрочихДоходовИРасходов
			ЗначениеСырыхДанных = xdtoОбъект.Получить("ВидПрочихДоходовИРасходов");
			ЗначениеСырыхДанныхВидПрочихДоходовИРасходов = xdtoОбъект.Получить("ВидПрочихДоходовИРасходов");
			Если ЗначениеСырыхДанных = Неопределено Или ТипЗнч(ЗначениеСырыхДанных) = Тип("ОбъектXDTO") тогда
			иначе
				ВладелецВидПрочихДоходовИРасходов = Справочники.нсиВидыСправочников.НайтиПоНаименованию("Виды прочих доходов и расходов", истина);
				Значение = Справочники.нсиУниверсальныйКлассификатор.НайтиПоНаименованию(ЗначениеСырыхДанных, Истина, , ВладелецВидПрочихДоходовИРасходов);
				//Если Значение = Справочники.нсиУниверсальныйКлассификатор.ПустаяСсылка() тогда
				//	Значение = Справочники.нсиУниверсальныйКлассификатор.СоздатьЭлемент();
				//	Значение.Владелец = ВладелецВидДеятельностиДляНалоговогоУчетаЗатрат;
				//	Значение.Наименование = ЗначениеСырыхДанных;
				//	значение.ОбменДанными.Загрузка = истина;
				//	значение.Записать();
				//	значение = значение.Ссылка;
				//конецесли;
				пОбъект.ВидПрочихДоходовИРасходов = Значение;
			КонецЕсли;
			
			пОбъект.РеквизитДопУпорядочивания = ПолучитьЗначениеСвойства("РеквизитДопУпорядочивания", xdtoОбъект, пМетаданные, "РеквизитДопУпорядочивания");
			пОбъект.КС_Неактуально = ПолучитьЗначениеСвойства("КС_Неактуально", xdtoОбъект, пМетаданные, "КС_Неактуально");
			пОбъект.КС_ДатаОкончанияАктуальности = ПолучитьЗначениеСвойства("КС_ДатаОкончанияАктуальности", xdtoОбъект, пМетаданные, "КС_ДатаОкончанияАктуальности");
			пОбъект.КС_КодСтатьи = ПолучитьЗначениеСвойства("КС_КодСтатьи", xdtoОбъект, пМетаданные, "КС_КодСтатьи");
			пОбъект.КС_Комментарий = ПолучитьЗначениеСвойства("КС_Комментарий", xdtoОбъект, пМетаданные, "КС_Комментарий");
			//пОбъект.КодMDM = ПолучитьЗначениеСвойства("КодMDM", xdtoОбъект, пМетаданные, "КодMDM");
			//пОбъект.MDM_Key = ПолучитьЗначениеСвойства("MDM_Key", xdtoОбъект, пМетаданные, "MDM_Key");
			//пОбъект.НсиРучная = ПолучитьЗначениеСвойства("НсиРучная", xdtoОбъект, пМетаданные, "НсиРучная");
			пОбъект.GUID = ПолучитьЗначениеСвойства("GUID", xdtoОбъект, пМетаданные, "GUID");
			пОбъект.ПринятиеКНалоговомуУчету = ПолучитьЗначениеСвойства("ПринятиеКНалоговомуУчету", xdtoОбъект, пМетаданные, "ПринятиеКНалоговомуУчету");
			//пОбъект.ПометкаУдаления = ПолучитьЗначениеСвойства("Пометка удаления", xdtoОбъект, пМетаданные, "Пометка удаления");
			//пОбъект.ЭтоГруппа = ПолучитьЗначениеСвойства("Это группа", xdtoОбъект, пМетаданные, "Это группа");
			//пОбъект.Родитель = ПолучитьЗначениеСвойства("Родитель", xdtoОбъект, пМетаданные, "Родитель");
			//пОбъект.Причина = ПолучитьЗначениеСвойства("Причина изменений", xdtoОбъект, пМетаданные, "Причина изменений");
			
			//Поиск подписчика
			пОбъект.Подписчик = Справочники.БИТ_Подписчики.НайтиПоРеквизиту("СтрокаПодключения", СтрокаПодлюченияПодписчик);
			
			//Поиск эталона статья затрат
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ 
				|	нсиУниверсальныйКлассификатор.Ссылка КАК Ссылка, 
				|	нсиУниверсальныйКлассификатор.Идентификатор КАК Идентификатор 
				|ПОМЕСТИТЬ ВТ 
				|ИЗ 
				|	Справочник.нсиВидыСправочников.Реквизиты КАК нсиВидыСправочниковРеквизиты 
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.нсиХранилищеСсылка КАК нсиХранилищеСсылка 
				|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.нсиУниверсальныйФункциональныйСправочник КАК нсиУниверсальныйКлассификатор 
				|			ПО нсиХранилищеСсылка.Элемент = нсиУниверсальныйКлассификатор.Идентификатор 
				|		ПО (нсиХранилищеСсылка.ВидСправочника = нсиВидыСправочниковРеквизиты.Ссылка) 
				|			И (нсиВидыСправочниковРеквизиты.Имя = &ВидПрочихДоходовИРасходов) 
				|ГДЕ 
				|	нсиУниверсальныйКлассификатор.Наименование = &Наименование 
				|	И нсиХранилищеСсылка.Значение = &ЗначениеВидПрочихДоходовИРасходов 
				|; 
				| 
				|//////////////////////////////////////////////////////////////////////////////// 
				|ВЫБРАТЬ 
				|	ВТ.Ссылка КАК Ссылка, 
				|	ВТ.Ссылка.MDM_Key КАК MDM_Key 
				|ИЗ 
				|	ВТ КАК ВТ 
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.нсиВидыСправочников.Реквизиты КАК нсиВидыСправочниковРеквизиты 
				|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.нсиХранилищеБулево КАК нсиХранилищеБулево 
				|			ПО нсиВидыСправочниковРеквизиты.Ссылка = нсиХранилищеБулево.ВидСправочника 
				|				И (нсиВидыСправочниковРеквизиты.Имя = &ПринятиеКНалоговомуУчету) 
				|				И нсиВидыСправочниковРеквизиты.Идентификатор = нсиХранилищеБулево.Реквизит 
				|		ПО (ВТ.Идентификатор = нсиХранилищеБулево.Элемент) 
				|ГДЕ 
				|	нсиХранилищеБулево.Значение = &ЗначениеПринятиеКНалоговомуУчету";
			
			Запрос.УстановитьПараметр("ЗначениеВидПрочихДоходовИРасходов", пОбъект.ВидПрочихДоходовИРасходов);
			Запрос.УстановитьПараметр("ЗначениеПринятиеКНалоговомуУчету", пОбъект.ПринятиеКНалоговомуУчету);
			Запрос.УстановитьПараметр("Наименование", пОбъект.Наименование);
			Запрос.УстановитьПараметр("ВидПрочихДоходовИРасходов", "ВидПрочихДоходовИРасходов");
			Запрос.УстановитьПараметр("ПринятиеКНалоговомуУчету", "ПринятиеКНалоговомуУчету");
			//Запрос.УстановитьПараметр("Статус", перечисления.нсиСтатусыОбъектаСправочника.Эталон);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			если ВыборкаДетальныеЗаписи.Следующий() тогда
				пОбъект.ДублирующаяПозиция = истина;
				пОбъект.ЭталонныйЭлемент = ВыборкаДетальныеЗаписи.Ссылка;
				пОбъект.MDM_Key = ВыборкаДетальныеЗаписи.MDM_Key;
			иначе
				пОбъект.ДублирующаяПозиция = Ложь;
			Конецесли;
			
			Если Заявки.ВГраница() = 0 тогда
				ЗаявкаОбъект = Заявки[0].ПолучитьОбъект();
				ЗаявкаСсылка = ЗаписатьЗаявку(ЗаявкаОбъект, пМетаданные, пОбъект);
			Иначе
				ЗаявкаСсылка = СоздатьЗаявку(ПараметрыАлгоритма.ВидЗаявкиПДР, пМетаданные, пОбъект);
			КонецЕсли;
			РезультатВыполнения.Добавить(ЗаявкаСсылка);
			
			если пОбъект.ДублирующаяПозиция тогда
				//Источник = новый структура();
				//источник.Вставить("нсиЗаявка", ЗаявкаСсылка);
				//ЭталонныйЭлемент = справочники.нсиУниверсальныйФункциональныйСправочник.НайтиПоНаименованию("Безвозмездное получение имущества");
				ЭталонныйЭлемент = пОбъект.ЭталонныйЭлемент.ссылка;
				//Если ЭталонныйЭлемент.ДополнительныеСвойства.Свойство("Данные") Тогда
				//	РеквизитыСтатьиЗатрат = ЭталонныйЭлемент.ДополнительныеСвойства.Данные;
				//Иначе
				пМетаданные = нсиУниверсальноеХранилище.ПолучитьМетаданные(ЭталонныйЭлемент.Владелец);
				Реквизиты = нсиУниверсальноеХранилище.ПолучитьОбъект(пМетаданные, ЭталонныйЭлемент.Ссылка);
				//КонецЕсли;
				
				ЭлементСтатьиЗатрат = Новый Структура;
				ЭлементСтатьиЗатрат.Вставить("ВидСправочника", "ВидПрочихДоходовИРасходов");
				ЭлементСтатьиЗатрат.Вставить("ДублирующаяПозиция", Истина);
				ЭлементСтатьиЗатрат.Вставить("GUID", Строка(пОбъект.GUID));
				ЭлементСтатьиЗатрат.Вставить("ПометкаУдаления", Реквизиты.ПометкаУдаления);
				ЭлементСтатьиЗатрат.Вставить("Код", пОбъект.Код_Подписчика);
				ЭлементСтатьиЗатрат.Вставить("Наименование", Реквизиты.Наименование);
				Если ЭталонныйЭлемент.Родитель = неопределено тогда
					ЭлементСтатьиЗатрат.Вставить("Родитель", "");
				иначе
					ЭлементСтатьиЗатрат.Вставить("Родитель", Строка(Реквизиты.Родитель.Наименование));
				конецесли;
				ЭлементСтатьиЗатрат.Вставить("ЭтоГруппа", Реквизиты.ЭтоГруппа);
				
				
				
				Если НЕ Реквизиты.ЭтоГруппа Тогда
					ЭлементСтатьиЗатрат.Вставить("ВидДеятельностиДляНалоговогоУчетаЗатрат", ?(ЗначениеЗаполнено(Реквизиты.ВидДеятельностиДляНалоговогоУчетаЗатрат), Реквизиты.ВидДеятельностиДляНалоговогоУчетаЗатрат.Наименование, ""));
					ЭлементСтатьиЗатрат.Вставить("ВидПрочихДоходовИРасходов", ?(ЗначениеЗаполнено(Реквизиты.ВидПрочихДоходовИРасходов), Реквизиты.ВидПрочихДоходовИРасходов.Наименование, ""));
					ЭлементСтатьиЗатрат.Вставить("ПринятиеКНалоговомуУчету", ?(ЗначениеЗаполнено(Реквизиты.ПринятиеКНалоговомуУчету), Реквизиты.ПринятиеКНалоговомуУчету, ""));
					ЭлементСтатьиЗатрат.Вставить("РеквизитДопУпорядочивания", ?(ЗначениеЗаполнено(Реквизиты.РеквизитДопУпорядочивания), Реквизиты.ПринятиеКНалоговомуУчету, ""));
					
					ЭлементСтатьиЗатрат.Вставить("КодMDM", ЭталонныйЭлемент.Код);
					ЭлементСтатьиЗатрат.Вставить("MDM_Key", ?(ЗначениеЗаполнено(ЭталонныйЭлемент.MDM_Key), ЭталонныйЭлемент.MDM_Key, ""));
					//ЭлементСтатьиЗатрат.Вставить("НсиРучная", ЭталонныйЭлемент.нсиРучноеИзменение);
					ЭлементСтатьиЗатрат.Вставить("КС_Неактуально", ?(ЗначениеЗаполнено(Реквизиты.КС_Неактуально), Реквизиты.КС_Неактуально, ""));
					ЭлементСтатьиЗатрат.Вставить("КС_ДатаОкончанияАктуальности", ?(ЗначениеЗаполнено(Реквизиты.КС_ДатаОкончанияАктуальности), Реквизиты.КС_ДатаОкончанияАктуальности, ""));
					ЭлементСтатьиЗатрат.Вставить("КС_Комментарий", ?(ЗначениеЗаполнено(Реквизиты.КС_Комментарий), Реквизиты.КС_Комментарий, ""));
				КонецЕсли;
				
				ЗаписьJson = Новый ЗаписьJSON;
				ПараметрыЗаписиJson = Новый ПараметрыЗаписиJSON( , Символы.Таб);
				ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJson);
				
				ЗаписатьJSON(ЗаписьJson, ЭлементСтатьиЗатрат);
				СтрокаJSon = ЗаписьJson.Закрыть();
				
				//ОпределитьПолучателейИСоздатьИсходящиеСообщения(ВидСправочника, СтрокаJSon);
				ВидСправочника = Справочники.нсиВидыСправочников.НайтиПоНаименованию("Прочие доходы и расходы", Истина);
				//БИТ_ФормированиеСообщений.ОпределитьПолучателейИСоздатьИсходящиеСообщения(СтатьиЗатрат, СтрокаJSon,,пОбъект.Подписчик);
				ЗаписьИзмененныйОбъект = РегистрыСведений.БИТ_КонтрольОбменаНормализация.СоздатьМенеджерЗаписи();
				ЗаписьИзмененныйОбъект.Объект = пОбъект.ЭталонныйЭлемент;
				ЗаписьИзмененныйОбъект.ДатаВремяСобытия = ТекущаяДата();
				ЗаписьИзмененныйОбъект.ИДСырыеДанные = Параметры.ИдентификаторСыройЗаписи;
				ЗаписьИзмененныйОбъект.Записать();
			конецесли;
			
		КонецЦикла;
	КонецЕсли;
КонецЕсли;

//Статьи движения денежных средств создание заявки
если ВидСправочника = "СтатьиДвиженияДенежныхСредств" тогда
	
	xdtoОбъектОбработки = ПолучитьОбъектXDTO(ОбъектОбработки);
	
	РезультатВыполнения = Новый Массив;
	
	пМетаданные = ПолучитьМетаданные(ПараметрыАлгоритма.ВидЗаявкиСДДС);
	
	Заявки = ПолучитьЗарегистрированныеЗаявки(Параметры.ИдентификаторСыройЗаписи);
	Если Заявки.ВГраница() > 0 тогда
		Для Инд = 0 по Заявки.ВГраница() Цикл
			ЗаявкаОбъект = Заявки[0].ПолучитьОбъект();
			Если ЗаявкаОбъект.Стартован тогда
				ВызватьИсключение СтрШаблон("Заявка ""%1"" стартована и не может быть помечена на удаление.", Строка(Заявки[Инд]))
			ИначеЕсли ЗаявкаОбъект.Завершен тогда
				ВызватьИсключение СтрШаблон("Заявка ""%1"" завершена и не может быть помечена на удаление.", Строка(Заявки[Инд]))
			Иначе
				ЗаявкаОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбъектОбработкиЗаявки = ПолучитьСписок("Строка", xdtoОбъектОбработки);
	Если Не ОбъектОбработкиЗаявки = Неопределено тогда
		Для Инд = 0 по ОбъектОбработкиЗаявки.Количество() - 1 цикл
			xdtoОбъект = ОбъектОбработкиЗаявки.Получить(Инд);
			пОбъект = нсиДанныеЗаявок.ПолучитьПустойОбъект(пМетаданные);
			
			пОбъект.Код_Подписчика = ПолучитьЗначениеСвойства("Код", xdtoОбъект, пМетаданные, "Код");
			пОбъект.Наименование = ПолучитьЗначениеСвойства("Наименование", xdtoОбъект, пМетаданные, "Наименование");
			
			//Поиск по наименованию вид деятельности
			ЗначениеСырыхДанных = xdtoОбъект.Получить("ВидДвиженияДенежныхСредств");
			ЗначениеСырыхДанныхВидДвиженияДенежныхСредств = xdtoОбъект.Получить("ВидДвиженияДенежныхСредств");
			Если ЗначениеСырыхДанных = Неопределено Или ТипЗнч(ЗначениеСырыхДанных) = Тип("ОбъектXDTO") тогда
			иначе
				ВладелецВидДвиженияДенежныхСредств = Справочники.нсиВидыСправочников.НайтиПоНаименованию("Виды движений денежных средств", истина);
				Значение = Справочники.нсиУниверсальныйКлассификатор.НайтиПоНаименованию(ЗначениеСырыхДанных, Истина, , ВладелецВидДвиженияДенежныхСредств);
				//Если Значение = Справочники.нсиУниверсальныйКлассификатор.ПустаяСсылка() тогда
				//	Значение = Справочники.нсиУниверсальныйКлассификатор.СоздатьЭлемент();
				//	Значение.Владелец = ВладелецВидДеятельностиДляНалоговогоУчетаЗатрат;
				//	Значение.Наименование = ЗначениеСырыхДанных;
				//	значение.ОбменДанными.Загрузка = истина;
				//	значение.Записать();
				//	значение = значение.Ссылка;
				//конецесли;
				пОбъект.ВидДвижения = Значение;
			КонецЕсли;
			
			//пОбъект.РеквизитДопУпорядочивания = ПолучитьЗначениеСвойства("РеквизитДопУпорядочивания", xdtoОбъект, пМетаданные, "РеквизитДопУпорядочивания");
			пОбъект.КС_Неактуально = ПолучитьЗначениеСвойства("КС_Неактуально", xdtoОбъект, пМетаданные, "КС_Неактуально");
			пОбъект.КС_ДатаОкончанияАктуальности = ПолучитьЗначениеСвойства("КС_ДатаОкончанияАктуальности", xdtoОбъект, пМетаданные, "КС_ДатаОкончанияАктуальности");
			пОбъект.КС_КодСтатьи = ПолучитьЗначениеСвойства("КС_КодСтатьи", xdtoОбъект, пМетаданные, "КС_КодСтатьи");
			пОбъект.КС_Комментарий = ПолучитьЗначениеСвойства("КС_Комментарий", xdtoОбъект, пМетаданные, "КС_Комментарий");
			//пОбъект.КодMDM = ПолучитьЗначениеСвойства("КодMDM", xdtoОбъект, пМетаданные, "КодMDM");
			//пОбъект.MDM_Key = ПолучитьЗначениеСвойства("MDM_Key", xdtoОбъект, пМетаданные, "MDM_Key");
			//пОбъект.НсиРучная = ПолучитьЗначениеСвойства("НсиРучная", xdtoОбъект, пМетаданные, "НсиРучная");
			пОбъект.GUID = ПолучитьЗначениеСвойства("GUID", xdtoОбъект, пМетаданные, "GUID");
			пОбъект.КодВидаОперацииНФО = ПолучитьЗначениеСвойства("КодВидаОперацииНФО", xdtoОбъект, пМетаданные, "КодВидаОперацииНФО");
			пОбъект.НаименованиеВидаОперацииНФО = ПолучитьЗначениеСвойства("НаименованиеВидаОперацииНФО", xdtoОбъект, пМетаданные, "НаименованиеВидаОперацииНФО");
			//пОбъект.ПометкаУдаления = ПолучитьЗначениеСвойства("Пометка удаления", xdtoОбъект, пМетаданные, "Пометка удаления");
			//пОбъект.ЭтоГруппа = ПолучитьЗначениеСвойства("Это группа", xdtoОбъект, пМетаданные, "Это группа");
			//пОбъект.Родитель = ПолучитьЗначениеСвойства("Родитель", xdtoОбъект, пМетаданные, "Родитель");
			//пОбъект.Причина = ПолучитьЗначениеСвойства("Причина изменений", xdtoОбъект, пМетаданные, "Причина изменений");
			
			//Поиск подписчика
			пОбъект.Подписчик = Справочники.БИТ_Подписчики.НайтиПоРеквизиту("СтрокаПодключения", СтрокаПодлюченияПодписчик);
			
			//Поиск эталона статья затрат
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ 
				|	нсиУниверсальныйКлассификатор.Ссылка КАК Ссылка, 
				|	нсиУниверсальныйКлассификатор.Идентификатор КАК Идентификатор, 
				|	нсиУниверсальныйКлассификатор.MDM_Key КАК MDM_Key 
				|ИЗ 
				|	Справочник.нсиВидыСправочников.Реквизиты КАК нсиВидыСправочниковРеквизиты 
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.нсиХранилищеСсылка КАК нсиХранилищеСсылка 
				|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.нсиУниверсальныйФункциональныйСправочник КАК нсиУниверсальныйКлассификатор 
				|			ПО нсиХранилищеСсылка.Элемент = нсиУниверсальныйКлассификатор.Идентификатор 
				|		ПО (нсиХранилищеСсылка.ВидСправочника = нсиВидыСправочниковРеквизиты.Ссылка) 
				|			И (нсиВидыСправочниковРеквизиты.Имя = &ВидДвижения) 
				|ГДЕ 
				|	нсиУниверсальныйКлассификатор.Наименование = &Наименование 
				|	И нсиХранилищеСсылка.Значение = &ЗначениеВидДвиженияДенежныхСредств";
			
			Запрос.УстановитьПараметр("ЗначениеВидДвиженияДенежныхСредств", пОбъект.ВидДвижения);
			Запрос.УстановитьПараметр("Наименование", пОбъект.Наименование);
			Запрос.УстановитьПараметр("ВидДвижения", "ВидДвижения");
			//Запрос.УстановитьПараметр("Статус", перечисления.нсиСтатусыОбъектаСправочника.Эталон);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			если ВыборкаДетальныеЗаписи.Следующий() тогда
				пОбъект.ДублирующаяПозиция = истина;
				пОбъект.ЭталонныйЭлемент = ВыборкаДетальныеЗаписи.Ссылка;
				пОбъект.MDM_Key = ВыборкаДетальныеЗаписи.MDM_Key;
			иначе
				пОбъект.ДублирующаяПозиция = Ложь;
			Конецесли;
			
			Если Заявки.ВГраница() = 0 тогда
				ЗаявкаОбъект = Заявки[0].ПолучитьОбъект();
				ЗаявкаСсылка = ЗаписатьЗаявку(ЗаявкаОбъект, пМетаданные, пОбъект);
			Иначе
				ЗаявкаСсылка = СоздатьЗаявку(ПараметрыАлгоритма.ВидЗаявкиСДДС, пМетаданные, пОбъект);
			КонецЕсли;
			РезультатВыполнения.Добавить(ЗаявкаСсылка);
			
			если пОбъект.ДублирующаяПозиция тогда
				//Источник = новый структура();
				//источник.Вставить("нсиЗаявка", ЗаявкаСсылка);
				//ЭталонныйЭлемент = справочники.нсиУниверсальныйФункциональныйСправочник.НайтиПоНаименованию("Выручка от продажи 3");
				ЭталонныйЭлемент = пОбъект.ЭталонныйЭлемент.ссылка;
				//Если ЭталонныйЭлемент.ДополнительныеСвойства.Свойство("Данные") Тогда
				//	РеквизитыСтатьиЗатрат = ЭталонныйЭлемент.ДополнительныеСвойства.Данные;
				//Иначе
				пМетаданные = нсиУниверсальноеХранилище.ПолучитьМетаданные(ЭталонныйЭлемент.Владелец);
				Реквизиты = нсиУниверсальноеХранилище.ПолучитьОбъект(пМетаданные, ЭталонныйЭлемент.Ссылка);
				//КонецЕсли;
				
				ЭлементСтатьиЗатрат = Новый Структура;
				ЭлементСтатьиЗатрат.Вставить("ВидСправочника", "ВидПрочихДоходовИРасходов");
				ЭлементСтатьиЗатрат.Вставить("ДублирующаяПозиция", Истина);
				ЭлементСтатьиЗатрат.Вставить("GUID", Строка(пОбъект.GUID));
				ЭлементСтатьиЗатрат.Вставить("ПометкаУдаления", Реквизиты.ПометкаУдаления);
				ЭлементСтатьиЗатрат.Вставить("Код", пОбъект.Код_Подписчика);
				ЭлементСтатьиЗатрат.Вставить("Наименование", Реквизиты.Наименование);
				Если ЭталонныйЭлемент.Родитель = неопределено тогда
					ЭлементСтатьиЗатрат.Вставить("Родитель", "");
				иначе
					ЭлементСтатьиЗатрат.Вставить("Родитель", Строка(Реквизиты.Родитель.Наименование));
				конецесли;
				ЭлементСтатьиЗатрат.Вставить("ЭтоГруппа", Реквизиты.ЭтоГруппа);
				
				
				
				Если НЕ Реквизиты.ЭтоГруппа Тогда
					ЭлементСтатьиЗатрат.Вставить("КодВидаОперацииНФО", ?(ЗначениеЗаполнено(Реквизиты.КодВидаОперацииНФО), Реквизиты.КодВидаОперацииНФО, ""));
					ЭлементСтатьиЗатрат.Вставить("НаименованиеВидаОперацииНФО", ?(ЗначениеЗаполнено(Реквизиты.НаименованиеВидаОперацииНФО), Реквизиты.НаименованиеВидаОперацииНФО, ""));
					ЭлементСтатьиЗатрат.Вставить("ВидДвиженияДенежныхСредств", ?(ЗначениеЗаполнено(Реквизиты.ВидДвижения), Реквизиты.ВидДвижения.наименование, ""));
					
					ЭлементСтатьиЗатрат.Вставить("КодMDM", ?(ЗначениеЗаполнено(ЭталонныйЭлемент.Код), ЭталонныйЭлемент.Код, ""));
					ЭлементСтатьиЗатрат.Вставить("MDM_Key", ?(ЗначениеЗаполнено(ЭталонныйЭлемент.MDM_Key), ЭталонныйЭлемент.MDM_Key, ""));
					//ЭлементСтатьиЗатрат.Вставить("НсиРучная", ЭталонныйЭлемент.нсиРучноеИзменение);
					ЭлементСтатьиЗатрат.Вставить("КС_Неактуально", ?(ЗначениеЗаполнено(Реквизиты.КС_Неактуально), Реквизиты.КС_Неактуально, ""));
					ЭлементСтатьиЗатрат.Вставить("КС_ДатаОкончанияАктуальности", ?(ЗначениеЗаполнено(Реквизиты.КС_ДатаОкончанияАктуальности), Реквизиты.КС_ДатаОкончанияАктуальности, ""));
					ЭлементСтатьиЗатрат.Вставить("КС_Комментарий", ?(ЗначениеЗаполнено(Реквизиты.КС_Комментарий), Реквизиты.КС_Комментарий, ""));
				КонецЕсли;
				
				ЗаписьJson = Новый ЗаписьJSON;
				ПараметрыЗаписиJson = Новый ПараметрыЗаписиJSON( , Символы.Таб);
				ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJson);
				
				ЗаписатьJSON(ЗаписьJson, ЭлементСтатьиЗатрат);
				СтрокаJSon = ЗаписьJson.Закрыть();
				
				//ОпределитьПолучателейИСоздатьИсходящиеСообщения(ВидСправочника, СтрокаJSon);
				ВидСправочника = Справочники.нсиВидыСправочников.НайтиПоНаименованию("СДДС", Истина);
				//БИТ_ФормированиеСообщений.ОпределитьПолучателейИСоздатьИсходящиеСообщения(СтатьиЗатрат, СтрокаJSon,,пОбъект.Подписчик);
				ЗаписьИзмененныйОбъект = РегистрыСведений.БИТ_КонтрольОбменаНормализация.СоздатьМенеджерЗаписи();
				ЗаписьИзмененныйОбъект.Объект = пОбъект.ЭталонныйЭлемент;
				ЗаписьИзмененныйОбъект.ДатаВремяСобытия = ТекущаяДата();
				ЗаписьИзмененныйОбъект.ИДСырыеДанные = Параметры.ИдентификаторСыройЗаписи;
				ЗаписьИзмененныйОбъект.Записать();
			конецесли;
			
		КонецЦикла;
	КонецЕсли;
КонецЕсли;

//Контрагенты
если ВидСправочника = "Контрагенты" тогда
	
	xdtoОбъектОбработки = ПолучитьОбъектXDTO(ОбъектОбработки);
	
	РезультатВыполнения = Новый Массив;
	
	пМетаданные = ПолучитьМетаданные(ПараметрыАлгоритма.ВидЗаявкиК);
	
	Заявки = ПолучитьЗарегистрированныеЗаявки(Параметры.ИдентификаторСыройЗаписи);
	Если Заявки.ВГраница() > 0 тогда
		Для Инд = 0 по Заявки.ВГраница() Цикл
			ЗаявкаОбъект = Заявки[0].ПолучитьОбъект();
			Если ЗаявкаОбъект.Стартован тогда
				ВызватьИсключение СтрШаблон("Заявка ""%1"" стартована и не может быть помечена на удаление.", Строка(Заявки[Инд]))
			ИначеЕсли ЗаявкаОбъект.Завершен тогда
				ВызватьИсключение СтрШаблон("Заявка ""%1"" завершена и не может быть помечена на удаление.", Строка(Заявки[Инд]))
			Иначе
				ЗаявкаОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбъектОбработкиЗаявки = ПолучитьСписок("Строка", xdtoОбъектОбработки);
	Если Не ОбъектОбработкиЗаявки = Неопределено тогда
		Для Инд = 0 по ОбъектОбработкиЗаявки.Количество() - 1 цикл
			xdtoОбъект = ОбъектОбработкиЗаявки.Получить(Инд);
			пОбъект = нсиДанныеЗаявок.ПолучитьПустойОбъект(пМетаданные);
			
			пОбъект.Код_Подписчика = ПолучитьЗначениеСвойства("Код", xdtoОбъект, пМетаданные, "Код");
			пОбъект.Наименование = ПолучитьЗначениеСвойства("Наименование", xdtoОбъект, пМетаданные, "Наименование");
			пОбъект.ПолноеНаименование = ПолучитьЗначениеСвойства("НаименованиеПолное", xdtoОбъект, пМетаданные, "ПолноеНаименование");
			пОбъект.Обособленное_подразделение = ПолучитьЗначениеСвойства("ОбособленноеПодразделение", xdtoОбъект, пМетаданные, "Обособленное_подразделение");
			пОбъект.КодПоОКПО = ПолучитьЗначениеСвойства("КодПоОКПО", xdtoОбъект, пМетаданные, "КодПоОКПО");
			пОбъект.ДокументУдостоверяющийЛичность = ПолучитьЗначениеСвойства("ДокументУдостоверяющийЛичность", xdtoОбъект, пМетаданные, "ДокументУдостоверяющийЛичность");
			пОбъект.Комментарий = ПолучитьЗначениеСвойства("Комментарий", xdtoОбъект, пМетаданные, "Комментарий");
			пОбъект.Описание = ПолучитьЗначениеСвойства("ДополнительнаяИнформация", xdtoОбъект, пМетаданные, "Описание");
			пОбъект.НалоговыйНомер = ПолучитьЗначениеСвойства("НалоговыйНомер", xdtoОбъект, пМетаданные, "НалоговыйНомер");
			пОбъект.ОГРН = ПолучитьЗначениеСвойства("РегистрационныйНомер", xdtoОбъект, пМетаданные, "ОГРН");
			пОбъект.КодГосударственногоОргана = ПолучитьЗначениеСвойства("КодГосударственногоОргана", xdtoОбъект, пМетаданные, "КодГосударственногоОргана");
			пОбъект.СвидетельствоСерияНомер = ПолучитьЗначениеСвойства("СвидетельствоСерияНомер", xdtoОбъект, пМетаданные, "СвидетельствоСерияНомер");
			пОбъект.СвидетельствоДатаВыдачи = ПолучитьЗначениеСвойства("СвидетельствоДатаВыдачи", xdtoОбъект, пМетаданные, "СвидетельствоДатаВыдачи");
			пОбъект.кс_Неактуально = ПолучитьЗначениеСвойства("кс_Неактуально", xdtoОбъект, пМетаданные, "кс_Неактуально");
			пОбъект.КС_ДатаОкончанияАктуальности = ПолучитьЗначениеСвойства("КС_ДатаОкончанияАктуальности", xdtoОбъект, пМетаданные, "КС_ДатаОкончанияАктуальности");
			пОбъект.GUID = ПолучитьЗначениеСвойства("GUID", xdtoОбъект, пМетаданные, "GUID");
			//пОбъект.MDM_Key = ПолучитьЗначениеСвойства("MDM_Key", xdtoОбъект, пМетаданные, "MDM_Key");
			//пОбъект.КодMDM = ПолучитьЗначениеСвойства("КодMDM", xdtoОбъект, пМетаданные, "КодMDM");
			
			//СтранаРегистрации
			ЗначениеСырыхДанных = xdtoОбъект.Получить("СтранаРегистрацииНаименование");
			Если ЗначениеСырыхДанных = Неопределено Или ТипЗнч(ЗначениеСырыхДанных) = Тип("ОбъектXDTO") тогда
			иначе
				Значение = Справочники.СтраныМира.НайтиПоНаименованию(ЗначениеСырыхДанных, истина);
				пОбъект.Страна_регистрации = Значение;
			КонецЕсли;
			
			//ГоловнойКонтрагент
			ЗначениеСырыхДанных = xdtoОбъект.Получить("ГоловнойКонтрагентИНН");
			Если ЗначениеСырыхДанных = Неопределено Или ТипЗнч(ЗначениеСырыхДанных) = Тип("ОбъектXDTO") тогда
			иначе
				Запрос = Новый Запрос;
				Запрос.Текст =
					"ВЫБРАТЬ 
					|	нсиКонтрагенты.Ссылка КАК Ссылка 
					|ИЗ 
					|	Справочник.нсиКонтрагенты КАК нсиКонтрагенты 
					|ГДЕ 
					|	нсиКонтрагенты.ИНН = &ИНН";
				
				Запрос.УстановитьПараметр("ИНН", ЗначениеСырыхДанных);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Если не РезультатЗапроса.Пустой() тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					ВыборкаДетальныеЗаписи.Следующий();
					пОбъект.Головной_контрагент = ВыборкаДетальныеЗаписи.ссылка;
				КонецЕсли;
			КонецЕсли;
			
			//Государственный_орган
			ЗначениеСырыхДанных = xdtoОбъект.Получить("ВидГосударственногоОргана");
			Если ЗначениеСырыхДанных = Неопределено Или ТипЗнч(ЗначениеСырыхДанных) = Тип("ОбъектXDTO") тогда
			иначе
				ВладелецВидыСправочников = Справочники.нсиВидыСправочников.НайтиПоНаименованию("Виды государственных органов", истина);
				Значение = Справочники.нсиУниверсальныйКлассификатор.НайтиПоНаименованию(ЗначениеСырыхДанных, Истина, , ВладелецВидыСправочников);
				пОбъект.Государственный_орган = Значение;
			КонецЕсли;
			
			пОбъект.ИНН = ПолучитьЗначениеСвойства("ИНН", xdtoОбъект, пМетаданные, "ИНН");
			пОбъект.КПП = ПолучитьЗначениеСвойства("ИНН", xdtoОбъект, пМетаданные, "ИНН");
			
			//Поиск подписчика
			пОбъект.Подписчик = Справочники.БИТ_Подписчики.НайтиПоРеквизиту("СтрокаПодключения", СтрокаПодлюченияПодписчик);
			
			//Присваивание группы элемента (согласно условиям описанным в Регламенте НСИ)
			ЮридическоеФизическоеЛицо = xdtoОбъект.Получить("ЮридическоеФизическоеЛицо");
			ГосударственныйОрган = xdtoОбъект.Получить("ГосударственныйОрган");
			ВладелецВидыКонтрагентов = справочники.нсиВидыСправочников.НайтиПоНаименованию("Виды контрагентов", Истина);
			СпрИП = справочники.нсиУниверсальныйКлассификатор.НайтиПоНаименованию("Индивидуальный предприниматель", Истина, , ВладелецВидыКонтрагентов);
			СпрФизЛицо = справочники.нсиУниверсальныйКлассификатор.НайтиПоНаименованию("Физическое лицо", Истина, , ВладелецВидыКонтрагентов);
			СпрЮрЛицо = справочники.нсиУниверсальныйКлассификатор.НайтиПоНаименованию("Юридическое лицо", Истина, , ВладелецВидыКонтрагентов);
			Если ГосударственныйОрган = "true" тогда
				НаименованиеГруппы = "Юридические лица - государственные органы";
				пОбъект.ЮрФизЛицо = перечисления.нсиЮрФизЛицо.ЮрЛицо;
				пОбъект.Вид_контрагента = справочники.нсиУниверсальныйКлассификатор.НайтиПоНаименованию("Государственный орган", Истина, , ВладелецВидыКонтрагентов);
			ИначеЕсли ЮридическоеФизическоеЛицо = "Обособленное подразделение" тогда
				НаименованиеГруппы = "Юридические лица — прочие";
				пОбъект.ЮрФизЛицо = перечисления.нсиЮрФизЛицо.ЮрЛицо;
				пОбъект.Вид_контрагента = справочники.нсиУниверсальныйКлассификатор.НайтиПоНаименованию("Обособленное подразделение", Истина, , ВладелецВидыКонтрагентов);
			ИначеЕсли ЮридическоеФизическоеЛицо = "Физическое лицо" тогда
				//Заполнено по ЕГРЮЛ?????
				Если СтрДлина(сокрЛП(пОбъект.ИНН)) = 12 тогда
					НаименованиеГруппы = "Физические лица — индивидуальные предприниматели";
					пОбъект.Вид_контрагента = СпрИП;
				иначе
					НаименованиеГруппы = "Физические лица — прочие";
					пОбъект.Вид_контрагента = СпрФизЛицо;
				конецесли;
				пОбъект.ЮрФизЛицо = перечисления.нсиЮрФизЛицо.ФизЛицо;
			ИначеЕсли ЮридическоеФизическоеЛицо = "Юридическое лицо" тогда
				Запрос = Новый Запрос;
				Запрос.Текст =
					"ВЫБРАТЬ 
					|	Организации.Ссылка КАК Ссылка 
					|ИЗ 
					|	Справочник.Организации КАК Организации 
					|ГДЕ 
					|	Организации.Контрагент.ИНН = &ИНН 
					|	И Организации.Контрагент.КПП = &КПП";
				
				Запрос.УстановитьПараметр("ИНН", пОбъект.ИНН);
				Запрос.УстановитьПараметр("КПП", пОбъект.КПП);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если не РезультатЗапроса.Пустой() тогда
					НаименованиеГруппы = "Юридические лица - собственные организации";
					пОбъект.ЮрФизЛицо = перечисления.нсиЮрФизЛицо.ЮрЛицо;
					пОбъект.Вид_контрагента = СпрЮрЛицо;
				иначе
					НаименованиеГруппы = "Юридические лица — прочие";
					пОбъект.ЮрФизЛицо = перечисления.нсиЮрФизЛицо.ЮрЛицо;
					пОбъект.Вид_контрагента = СпрЮрЛицо;
				конецесли;
			конецесли;
			
			//Запрос = Новый Запрос;
			//Запрос.Текст =
			//"ВЫБРАТЬ
			//|	нсиКонтрагенты.Ссылка КАК Ссылка
			//|ИЗ
			//|	Справочник.нсиКонтрагенты КАК нсиКонтрагенты
			//|ГДЕ
			//|	нсиКонтрагенты.Наименование = &Наименование
			//|	И нсиКонтрагенты.ЭтоГруппа";
			//
			//Запрос.УстановитьПараметр("Наименование", НаименованиеГруппы);
			//
			//РезультатЗапроса = Запрос.Выполнить();
			//Если РезультатЗапроса.Пустой() тогда
			//	Родитель = справочники.нсиКонтрагенты.СоздатьГруппу();
			//	Родитель.Наименование = НаименованиеГруппы;
			//	Родитель.ОбменДанными.Загрузка = истина;
			//	Родитель.Записать();
			//	Родитель = Родитель.Ссылка;
			//иначе
			//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			//	ВыборкаДетальныеЗаписи.Следующий();
			//	Родитель = ВыборкаДетальныеЗаписи.ссылка;
			//КонецЕсли;
			//пОбъект.родитель = Родитель;
			
			//проверка на правильность заполнения признака Юр.лицо/Физ.Лицо и вид контрагента - по проверки ИНН : у организации - 10-значный , физического лица или ИП 12-значный. Если Признак не соответствует Юр.лицо/Физ.Лицо , тогда автоматически исправляется на корректный.
			Если СтрДлина(сокрЛП(пОбъект.ИНН)) = 12 тогда
				Если пОбъект.ЮрФизЛицо = перечисления.нсиЮрФизЛицо.ЮрЛицо тогда
					пОбъект.ЮрФизЛицо = перечисления.нсиЮрФизЛицо.ФизЛицо;
				конецесли;
				пОбъект.Вид_контрагента = СпрИП;
			иначеесли СтрДлина(сокрЛП(пОбъект.ИНН)) = 10 тогда
				Если пОбъект.ЮрФизЛицо = перечисления.нсиЮрФизЛицо.ФизЛицо тогда
					пОбъект.ЮрФизЛицо = перечисления.нсиЮрФизЛицо.ЮрЛицо;
				конецесли;
				если не (пОбъект.Вид_контрагента = СпрИП или пОбъект.Вид_контрагента = СпрФизЛицо) тогда
					пОбъект.Вид_контрагента = СпрЮрЛицо;
				конецесли;
			конецесли;
			
			//На третьем шаге происходит автоматическое заполнение реквизитов по ЕГРЮЛ/ЕГРИП :
			//Юридические лица
			Если пОбъект.ЮрФизЛицо = перечисления.нсиЮрФизЛицо.ЮрЛицо и СтрДлина(сокрЛП(пОбъект.ИНН)) = 10 тогда
				РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(пОбъект.ИНН);
				ЗаполнитьЗначенияСвойств(пОбъект, РеквизитыКонтрагента, "КПП, Наименование, ДатаРегистрации");
				пОбъект.ПолноеНаименование = РеквизитыКонтрагента.НаименованиеСокращенное;
				пОбъект.Полное_наименование_ЕГРЮЛ = РеквизитыКонтрагента.НаименованиеПолное;
				//пОбъект.РегистрационныйНомер (ОГРН)
				//Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес")
				//	И НЕ РеквизитыКонтрагента.ЮридическийАдрес = Неопределено Тогда
				//	нсиПолучениеДанныхПоИННКлиент.ЗаполнитьЭлементКонтактнойИнформации(пОбъект,
				//	ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"),
				//	РеквизитыКонтрагента.ЮридическийАдрес);
				//КонецЕсли;
				//физические лица
			иначеесли пОбъект.ЮрФизЛицо = перечисления.нсиЮрФизЛицо.ФизЛицо и СтрДлина(сокрЛП(пОбъект.ИНН)) = 12 тогда
				РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(пОбъект.ИНН);
				ЗаполнитьЗначенияСвойств(пОбъект, РеквизитыКонтрагента, "Наименование, ДатаРегистрации");
				пОбъект.ПолноеНаименование = РеквизитыКонтрагента.НаименованиеСокращенное;
				//пОбъект.Полное_наименование_ЕГРЮЛ = РеквизитыКонтрагента.НаименованиеПолное;
				//РегистрационныйНомер (ОГРНИП)
				//Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес")
				//	И НЕ РеквизитыКонтрагента.ЮридическийАдрес = Неопределено Тогда
				//	нсиПолучениеДанныхПоИННКлиент.ЗаполнитьЭлементКонтактнойИнформации(пОбъект,
				//	ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"),
				//	РеквизитыКонтрагента.ЮридическийАдрес);
				//КонецЕсли;
				Если РеквизитыКонтрагента.Свойство("СвидетельствоОРегистрации")
					И НЕ РеквизитыКонтрагента.СвидетельствоОРегистрации = Неопределено Тогда
					пОбъект.СвидетельствоСерияНомер = РеквизитыКонтрагента.СвидетельствоОРегистрации.Серия + " " + РеквизитыКонтрагента.СвидетельствоОРегистрации.Номер;
					пОбъект.СвидетельствоДатаВыдачи = РеквизитыКонтрагента.СвидетельствоОРегистрации.Дата;
				конецесли;
			КонецЕсли;
			
			//				На четвертом шаге происходят автоматические проверки:
			
			//Юридические лица и Физические лица (ИП)
			//проверка на заполненность Страны регистрации - если страна не заполнена, то автоматически создается задача Ответственному за нормализацию пользователю базы Подписчика по уточнению и исправлению информации.
			//БИТ_АлгоритмыСервер.ЭтоИзменение(Форма);
			//проверка на заполненность реквизита ИНН у юр.лица- если у контрагента с признаком юр.лицо ИНН не заполнен, то автоматически создается задача Ответственному за нормализацию пользователю базы Подписчика по уточнению и исправлению информации.
			//проверка на заполненность реквизита ИНН у ИП- если у контрагента в наименовании или в полном наименовании содержится "ИП" ИЛИ "Индивидуальный Предприниматель" и ИНН не заполнен, то автоматически создается задача Ответственному за нормализацию пользователю базы Подписчика по уточнению и исправлению информации.
			//проверка на соответствие требованиям КПП (для юридических лиц)- если КПП не проходит проверку, то автоматически создается задача Ответственному за нормализацию пользователю базы Подписчика по уточнению и исправлению информации.
			//проверка на правильность заполнения признака Юр.лицо/Физ.Лицо и вид контрагента - по проверки ИНН : у организации - 10-значный , физического лица или ИП 12-значный. Если Признак не соответствует Юр.лицо/Физ.Лицо , тогда автоматически исправляется на корректный.
			//проверка на правильность заполнения вида контрагента Юр.лицо по КПП - если значения 5 и 6 символов в КПП соответствуют значениям для Обособленного подразделения (см. п.2), то автоматически создается задача Ответственному за нормализацию пользователю базы Подписчика по уточнению и исправлению информации.
			//проверка на страну регистрации - если наименовании контрагента состоит из латинских символов И страна регистрации указана РОССИЯ или не заполнена , тогда создается задача Ответственному за нормализацию пользователю базы Подписчика по уточнению и исправлению информации.
			//проверка на найденное значение в ЕГРЮЛ -  если контрагент  не найден при проверке ЕГРЮЛ, то после анализа причин Экспертом создается задача Ответственному за нормализацию пользователю базы Подписчика по уточнению и исправлению информации.
			//
			////Поиск эталона
			//Запрос = Новый Запрос;
			//Запрос.Текст =
			//"ВЫБРАТЬ
			//|	нсиУниверсальныйКлассификатор.Ссылка КАК Ссылка,
			//|	нсиУниверсальныйКлассификатор.MDM_Key КАК MDM_Key
			//|ИЗ
			//|	Справочник.нсиВидыСправочников.Реквизиты КАК нсиВидыСправочниковРеквизиты
			//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.нсиХранилищеСсылка КАК нсиХранилищеСтрока
			//|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.нсиУниверсальныйФункциональныйСправочник КАК нсиУниверсальныйКлассификатор
			//|			ПО нсиХранилищеСтрока.Элемент = нсиУниверсальныйКлассификатор.Идентификатор
			//|		ПО (нсиХранилищеСтрока.ВидСправочника = нсиВидыСправочниковРеквизиты.Ссылка)
			//|ГДЕ
			//|	нсиХранилищеСтрока.Значение = &ЗначениеВидРасходов
			//|	И нсиУниверсальныйКлассификатор.Наименование = &Наименование
			//|	И нсиВидыСправочниковРеквизиты.Имя = &НаименованиеРеквизита";
			//
			//Запрос.УстановитьПараметр("ЗначениеВидРасходов", пОбъект.ВидРасходовНУ);
			//Запрос.УстановитьПараметр("Наименование", пОбъект.Наименование);
			//Запрос.УстановитьПараметр("НаименованиеРеквизита", "ВидРасходовНУ");
			////Запрос.УстановитьПараметр("Статус", перечисления.нсиСтатусыОбъектаСправочника.Эталон);
			//
			//РезультатЗапроса = Запрос.Выполнить();
			//
			//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			//
			//если ВыборкаДетальныеЗаписи.Следующий() тогда
			//	пОбъект.ДублирующаяПозиция = истина;
			//	пОбъект.ЭталонныйЭлемент = ВыборкаДетальныеЗаписи.Ссылка;
			//	пОбъект.MDM_Key = ВыборкаДетальныеЗаписи.MDM_Key;
			//иначе
			//	пОбъект.ДублирующаяПозиция = Ложь;
			//Конецесли;
			
			Если Заявки.ВГраница() = 0 тогда
				ЗаявкаОбъект = Заявки[0].ПолучитьОбъект();
				ЗаявкаСсылка = ЗаписатьЗаявку(ЗаявкаОбъект, пМетаданные, пОбъект);
			Иначе
				ЗаявкаСсылка = СоздатьЗаявку(ПараметрыАлгоритма.ВидЗаявкиК, пМетаданные, пОбъект);
			КонецЕсли;
			РезультатВыполнения.Добавить(ЗаявкаСсылка);
			
			//если пОбъект.ДублирующаяПозиция тогда
			//	//Источник = новый структура();
			//	//источник.Вставить("нсиЗаявка", ЗаявкаСсылка);
			//	ЭталонныйЭлемент = пОбъект.ЭталонныйЭлемент.ссылка;
			//	//Если ЭталонныйЭлемент.ДополнительныеСвойства.Свойство("Данные") Тогда
			//	//	РеквизитыСтатьиЗатрат = ЭталонныйЭлемент.ДополнительныеСвойства.Данные;
			//	//Иначе
			//	пМетаданные = нсиУниверсальноеХранилище.ПолучитьМетаданные(ЭталонныйЭлемент.Владелец);
			//	РеквизитыСтатьиЗатрат = нсиУниверсальноеХранилище.ПолучитьОбъект(пМетаданные,ЭталонныйЭлемент.Ссылка);
			//	//КонецЕсли;
			//
			//	ЭлементСтатьиЗатрат = Новый Структура;
			//	ЭлементСтатьиЗатрат.Вставить("ВидСправочника", "СтатьиЗатрат");
			//	ЭлементСтатьиЗатрат.Вставить("ДублирующаяПозиция", Истина);
			//	ЭлементСтатьиЗатрат.Вставить("GUID", Строка(ЭталонныйЭлемент.УникальныйИдентификатор()));
			//	ЭлементСтатьиЗатрат.Вставить("ПометкаУдаления", РеквизитыСтатьиЗатрат.ПометкаУдаления);
			//	ЭлементСтатьиЗатрат.Вставить("Код", РеквизитыСтатьиЗатрат.Код_Подписчика);
			//	ЭлементСтатьиЗатрат.Вставить("Наименование", РеквизитыСтатьиЗатрат.Наименование);
			//	Если ЭталонныйЭлемент.Родитель = неопределено тогда
			//		ЭлементСтатьиЗатрат.Вставить("Родитель", "");
			//	иначе
			//		ЭлементСтатьиЗатрат.Вставить("Родитель", Строка(РеквизитыСтатьиЗатрат.Родитель.Наименование));
			//	конецесли;
			//	ЭлементСтатьиЗатрат.Вставить("ЭтоГруппа", РеквизитыСтатьиЗатрат.ЭтоГруппа);
			//
			//	ЭлементСтатьиЗатрат.Вставить("КС_КодСтатьи", РеквизитыСтатьиЗатрат.КС_КодСтатьи);
			//	Если НЕ РеквизитыСтатьиЗатрат.ЭтоГруппа Тогда
			//		ЭлементСтатьиЗатрат.Вставить("ВидДеятельностиДляНалоговогоУчетаЗатрат", РеквизитыСтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат.Наименование);
			//		ЭлементСтатьиЗатрат.Вставить("ВидРасходовНУ", РеквизитыСтатьиЗатрат.ВидРасходовНУ.Наименование);
			//		ЭлементСтатьиЗатрат.Вставить("РеквизитДопУпорядочивания", РеквизитыСтатьиЗатрат.РеквизитДопУпорядочивания);
			//
			//		ЭлементСтатьиЗатрат.Вставить("КодMDM", пОбъект.КодMDM);
			//		ЭлементСтатьиЗатрат.Вставить("MDM_Key", ЭталонныйЭлемент.MDM_Key);
			//		ЭлементСтатьиЗатрат.Вставить("НсиРучная", ЭталонныйЭлемент.нсиРучноеИзменение);
			//		ЭлементСтатьиЗатрат.Вставить("КС_Неактуально", РеквизитыСтатьиЗатрат.КС_Неактуально);
			//		ЭлементСтатьиЗатрат.Вставить("КС_ДатаОкончанияАктуальности", РеквизитыСтатьиЗатрат.КС_ДатаОкончанияАктуальности);
			//		ЭлементСтатьиЗатрат.Вставить("КС_Комментарий", РеквизитыСтатьиЗатрат.КС_Комментарий);
			//
			//		КС_ПереченьСчетов = Новый Массив;
			//		Для Каждого Стр Из РеквизитыСтатьиЗатрат.КС_ПереченьСчетов Цикл
			//			НовСтр = Новый Структура;
			//			НовСтр.Вставить("ИспользуетсяВУчете", Стр.ИспользуетсяВУчете);
			//			НовСтр.Вставить("Счет", СокрЛП(Стр.Счет.Код));
			//			НовСтр.Вставить("НаименованиеСчета", Стр.НаименованиеСчета);
			//
			//			КС_ПереченьСчетов.Добавить(НовСтр);
			//		КонецЦикла;
			//		ЭлементСтатьиЗатрат.Вставить("КС_ПереченьСчетов", КС_ПереченьСчетов);
			//	КонецЕсли;
			//
			//	ЗаписьJson = Новый ЗаписьJSON;
			//	ПараметрыЗаписиJson = Новый ПараметрыЗаписиJSON(, Символы.Таб);
			//	ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJson);
			//
			//	ЗаписатьJSON(ЗаписьJson, ЭлементСтатьиЗатрат);
			//	СтрокаJSon = ЗаписьJson.Закрыть();
			//
			//	//ОпределитьПолучателейИСоздатьИсходящиеСообщения(ВидСправочника, СтрокаJSon);
			//	СтатьиЗатрат = Справочники.нсиВидыСправочников.НайтиПоНаименованию("Статьи затрат" , Истина);
			//	БИТ_ФормированиеСообщений.ОпределитьПолучателейИСоздатьИсходящиеСообщения(СтатьиЗатрат, СтрокаJSon);
			//конецесли;
			
		КонецЦикла;
	КонецЕсли;
КонецЕсли;
