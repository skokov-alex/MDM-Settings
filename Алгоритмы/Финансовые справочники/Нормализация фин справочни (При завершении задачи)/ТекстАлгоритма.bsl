//// >> 1БИТ, Скоков, 20.11.2020, Задача MDM-51 
//// Алгоритм изменения наименования заявки и наименования задачи. 
//// Вызывается при создании задачи. 
//// Наименование: Финансовые справочники (При создании задачи) 
//// Область применения: Обработка завершения задач БП 
//ЗаявкаОбъект = Параметры.ЗаявкаОбъект; 
 
//Если ЗаявкаОбъект.ИзменяемыеОбъекты.Количество() > 0 Тогда 
//	// Получим наименование заявки 
//	МассивНаименования = Новый Массив; 
//	ТекущийОбъект = ЗаявкаОбъект.ИзменяемыеОбъекты[0]; 
//	 
//	Если ТекущийОбъект.Изменение Тогда 
//		МассивНаименования.Добавить("Изменить"); 
//	Иначе 
//		МассивНаименования.Добавить("Создать"); 
//	КонецЕсли; 
//	 
//	НаименованиеВидаЗаявки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта( 
//		ЗаявкаОбъект.ВидЗаявки, "Наименование"); 
//	 
//	МассивНаименования.Добавить(НаименованиеВидаЗаявки); 
//	МассивНаименования.Добавить(ОбъектОбработки.Наименование); 
//	 
//	ЗаявкаОбъект.Наименование = СтрСоединить(МассивНаименования, ". "); 
//	 
//	// Получим наименование задачи 
//	ЗадачаОбъект = Параметры.ЗадачаОбъект; 
//	ШагБП = ЗадачаОбъект.нсиШагБП; 
//	 
//	Если ЗадачаОбъект.нсиОтклонена Тогда 
//		ЭтапСогласования = "Не согласовано: "; 
//	ИначеЕсли ШагБП = Перечисления.нсиШагиБП.РаспределениеЗадач Тогда 
//		ЭтапСогласования = ""; 
//	ИначеЕсли ШагБП = Перечисления.нсиШагиБП.ПервичнаяОбработка  
//		И ЗадачаОбъект.РольИсполнителя = ПараметрыАлгоритма.Модератор Тогда 
//		ЭтапСогласования = ""; 
//	ИначеЕсли ШагБП = Перечисления.нсиШагиБП.ПервичнаяОбработка Тогда 
//		ЭтапСогласования = "Первичная обработка: "; 
//	Иначе 
//		ЭтапСогласования = "Согласовано: "; 
//	КонецЕсли;  
//	  
//	ЗадачаОбъект.Наименование = ЭтапСогласования + ЗаявкаОбъект.Наименование; 
//КонецЕсли; 
//// << 1БИТ, Скоков, 20.11.2020, Задача MDM-51 
 
//+++БИТ Нуртдинов 19.11.20  
УстановитьПривилегированныйРежим(Истина); 
//При отклонении заявки если указан эталонный элемент или дублирующая позиция, отправлять данные в базу подписчика  
если ЗначениеЗаполнено(ОбъектОбработки.ЭталонныйЭлемент) и Параметры.ЗаявкаОбъект.ОтклонитьЗаявку тогда 
	 
	//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Параметры.ЗаявкаОбъект.ОтклонитьЗаявку");  
 
	Если Параметры.ЗаявкаОбъект.ВидЗаявки.Наименование = "Нормализация данных для справочника Статьи затрат" тогда 
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нормализация данных для справочника Статьи затрат");  
		пОбъект = ОбъектОбработки; 
		ЭталонныйЭлемент = пОбъект.ЭталонныйЭлемент.ссылка;			  
		пМетаданные = нсиУниверсальноеХранилище.ПолучитьМетаданные(ЭталонныйЭлемент.Владелец);  
		РеквизитыСтатьиЗатрат = нсиУниверсальноеХранилище.ПолучитьОбъект(пМетаданные,ЭталонныйЭлемент.Ссылка);  
		 
		ЭлементСтатьиЗатрат = Новый Структура;  
		ЭлементСтатьиЗатрат.Вставить("ВидСправочника", "СтатьиЗатрат");  
		ЭлементСтатьиЗатрат.Вставить("ДублирующаяПозиция", Истина);  
		ЭлементСтатьиЗатрат.Вставить("GUID", Строка(ОбъектОбработки.guid));  
		ЭлементСтатьиЗатрат.Вставить("ПометкаУдаления", РеквизитыСтатьиЗатрат.ПометкаУдаления);  
		ЭлементСтатьиЗатрат.Вставить("Код", ОбъектОбработки.Код);  
		ЭлементСтатьиЗатрат.Вставить("Наименование", РеквизитыСтатьиЗатрат.Наименование);				  
		Если ЭталонныйЭлемент.Родитель = неопределено тогда   
			ЭлементСтатьиЗатрат.Вставить("Родитель", "");  
		иначе  
			ЭлементСтатьиЗатрат.Вставить("Родитель", Строка(РеквизитыСтатьиЗатрат.Родитель.Наименование));  
		конецесли; 					  
		ЭлементСтатьиЗатрат.Вставить("ЭтоГруппа", РеквизитыСтатьиЗатрат.ЭтоГруппа);  
		 
		ЭлементСтатьиЗатрат.Вставить("КС_КодСтатьи", РеквизитыСтатьиЗатрат.КС_КодСтатьи);  
		Если НЕ РеквизитыСтатьиЗатрат.ЭтоГруппа Тогда  
			ЭлементСтатьиЗатрат.Вставить("ВидДеятельностиДляНалоговогоУчетаЗатрат", ?(ЗначениеЗаполнено(РеквизитыСтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат), РеквизитыСтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат.Наименование, ""));  
						ЭлементСтатьиЗатрат.Вставить("ВидРасходовНУ", ?(ЗначениеЗаполнено(РеквизитыСтатьиЗатрат.ВидРасходовНУ), РеквизитыСтатьиЗатрат.ВидРасходовНУ.Наименование, ""));  
						ЭлементСтатьиЗатрат.Вставить("РеквизитДопУпорядочивания", ?(ЗначениеЗаполнено(РеквизитыСтатьиЗатрат.РеквизитДопУпорядочивания), РеквизитыСтатьиЗатрат.РеквизитДопУпорядочивания, ""));  
						  
						ЭлементСтатьиЗатрат.Вставить("КодMDM", ЭталонныйЭлемент.Код);  
						ЭлементСтатьиЗатрат.Вставить("MDM_Key", ?(ЗначениеЗаполнено(ЭталонныйЭлемент.MDM_Key), ЭталонныйЭлемент.MDM_Key, ""));  
						//ЭлементСтатьиЗатрат.Вставить("НсиРучная", ЭталонныйЭлемент.нсиРучноеИзменение);  
						ЭлементСтатьиЗатрат.Вставить("КС_Неактуально",  ?(ЗначениеЗаполнено(РеквизитыСтатьиЗатрат.КС_Неактуально), РеквизитыСтатьиЗатрат.КС_Неактуально, ""));  
						ЭлементСтатьиЗатрат.Вставить("КС_ДатаОкончанияАктуальности", ?(ЗначениеЗаполнено(РеквизитыСтатьиЗатрат.КС_ДатаОкончанияАктуальности), РеквизитыСтатьиЗатрат.КС_ДатаОкончанияАктуальности, ""));  
						ЭлементСтатьиЗатрат.Вставить("КС_Комментарий", ?(ЗначениеЗаполнено(РеквизитыСтатьиЗатрат.КС_Комментарий), РеквизитыСтатьиЗатрат.КС_Комментарий, ""));   
			 
			КС_ПереченьСчетов = Новый Массив;  
			Для Каждого Стр Из РеквизитыСтатьиЗатрат.КС_ПереченьСчетов Цикл  
				НовСтр = Новый Структура;  
				НовСтр.Вставить("ИспользуетсяВУчете", Стр.ИспользуетсяВУчете);  
				НовСтр.Вставить("Счет", СокрЛП(Стр.Счет.Код));  
				НовСтр.Вставить("НаименованиеСчета", Стр.НаименованиеСчета);  
				 
				КС_ПереченьСчетов.Добавить(НовСтр);  
			КонецЦикла;  
			ЭлементСтатьиЗатрат.Вставить("КС_ПереченьСчетов", КС_ПереченьСчетов);  
		КонецЕсли;  
		 
		ЗаписьJson = Новый ЗаписьJSON;  
		ПараметрыЗаписиJson = Новый ПараметрыЗаписиJSON(, Символы.Таб);   
		ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJson);   
		 
		ЗаписатьJSON(ЗаписьJson, ЭлементСтатьиЗатрат);  
		СтрокаJSon = ЗаписьJson.Закрыть();  
		 
		//ОпределитьПолучателейИСоздатьИсходящиеСообщения(ВидСправочника, СтрокаJSon);  
		СтатьиЗатрат = Справочники.нсиВидыСправочников.НайтиПоНаименованию("Статьи затрат" , Истина);  
		БИТ_ФормированиеСообщений.ОпределитьПолучателейИСоздатьИсходящиеСообщения(СтатьиЗатрат, СтрокаJSon);  
	Конецесли;     
	 
	Если Параметры.ЗаявкаОбъект.ВидЗаявки.Наименование = "Нормализация данных для справочника Прочие доходы и расходы" тогда 
		пОбъект = ОбъектОбработки; 
		ЭталонныйЭлемент = пОбъект.ЭталонныйЭлемент.ссылка;			  
		//Если ЭталонныйЭлемент.ДополнительныеСвойства.Свойство("Данные") Тогда   
		//	РеквизитыСтатьиЗатрат = ЭталонныйЭлемент.ДополнительныеСвойства.Данные;  
		//Иначе  
		пМетаданные = нсиУниверсальноеХранилище.ПолучитьМетаданные(ЭталонныйЭлемент.Владелец);  
		Реквизиты = нсиУниверсальноеХранилище.ПолучитьОбъект(пМетаданные,ЭталонныйЭлемент.Ссылка);  
		//КонецЕсли;  
		 
		ЭлементСтатьиЗатрат = Новый Структура;  
		ЭлементСтатьиЗатрат.Вставить("ВидСправочника", "ВидПрочихДоходовИРасходов");  
		ЭлементСтатьиЗатрат.Вставить("ДублирующаяПозиция", Истина);  
		ЭлементСтатьиЗатрат.Вставить("GUID", Строка(ОбъектОбработки.guid));  
		ЭлементСтатьиЗатрат.Вставить("ПометкаУдаления", Реквизиты.ПометкаУдаления);  
		ЭлементСтатьиЗатрат.Вставить("Код", ОбъектОбработки.Код);  
		ЭлементСтатьиЗатрат.Вставить("Наименование", Реквизиты.Наименование);				  
		Если ЭталонныйЭлемент.Родитель = неопределено тогда   
			ЭлементСтатьиЗатрат.Вставить("Родитель", "");  
		иначе  
			ЭлементСтатьиЗатрат.Вставить("Родитель", Строка(Реквизиты.Родитель.Наименование));  
		конецесли; 					  
		ЭлементСтатьиЗатрат.Вставить("ЭтоГруппа", Реквизиты.ЭтоГруппа);  
		 
		 
		 
		Если НЕ Реквизиты.ЭтоГруппа Тогда  
			ЭлементСтатьиЗатрат.Вставить("ВидДеятельностиДляНалоговогоУчетаЗатрат", ?(ЗначениеЗаполнено(Реквизиты.ВидДеятельностиДляНалоговогоУчетаЗатрат), Реквизиты.ВидДеятельностиДляНалоговогоУчетаЗатрат.Наименование, ""));						  
			ЭлементСтатьиЗатрат.Вставить("ВидПрочихДоходовИРасходов", ?(ЗначениеЗаполнено(Реквизиты.ВидПрочихДоходовИРасходов),Реквизиты.ВидПрочихДоходовИРасходов.Наименование, ""));  
			ЭлементСтатьиЗатрат.Вставить("ПринятиеКНалоговомуУчету", ?(ЗначениеЗаполнено(Реквизиты.ПринятиеКНалоговомуУчету), Реквизиты.ПринятиеКНалоговомуУчету, ""));  
			ЭлементСтатьиЗатрат.Вставить("РеквизитДопУпорядочивания", ?(ЗначениеЗаполнено(Реквизиты.РеквизитДопУпорядочивания), Реквизиты.ПринятиеКНалоговомуУчету, ""));  
			 
			ЭлементСтатьиЗатрат.Вставить("КодMDM", ЭталонныйЭлемент.Код);  
						ЭлементСтатьиЗатрат.Вставить("MDM_Key", ?(ЗначениеЗаполнено(ЭталонныйЭлемент.MDM_Key), ЭталонныйЭлемент.MDM_Key, ""));  
						//ЭлементСтатьиЗатрат.Вставить("НсиРучная", ЭталонныйЭлемент.нсиРучноеИзменение);  
						ЭлементСтатьиЗатрат.Вставить("КС_Неактуально",  ?(ЗначениеЗаполнено(Реквизиты.КС_Неактуально), Реквизиты.КС_Неактуально, ""));  
						ЭлементСтатьиЗатрат.Вставить("КС_ДатаОкончанияАктуальности", ?(ЗначениеЗаполнено(Реквизиты.КС_ДатаОкончанияАктуальности), Реквизиты.КС_ДатаОкончанияАктуальности, ""));  
						ЭлементСтатьиЗатрат.Вставить("КС_Комментарий", ?(ЗначениеЗаполнено(Реквизиты.КС_Комментарий), Реквизиты.КС_Комментарий, ""));   
		КонецЕсли;  
		 
		ЗаписьJson = Новый ЗаписьJSON;  
		ПараметрыЗаписиJson = Новый ПараметрыЗаписиJSON(, Символы.Таб);   
		ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJson);   
		 
		ЗаписатьJSON(ЗаписьJson, ЭлементСтатьиЗатрат);  
		СтрокаJSon = ЗаписьJson.Закрыть();  
		 
		//ОпределитьПолучателейИСоздатьИсходящиеСообщения(ВидСправочника, СтрокаJSon);  
		ВидСправочника = Справочники.нсиВидыСправочников.НайтиПоНаименованию("Прочие доходы и расходы" , Истина);  
		БИТ_ФормированиеСообщений.ОпределитьПолучателейИСоздатьИсходящиеСообщения(ВидСправочника, СтрокаJSon); 
	Конецесли;   
	 
	Если Параметры.ЗаявкаОбъект.ВидЗаявки.Наименование = "Нормализация данных для справочника Статьи движения денежных средств" тогда 
		пОбъект = ОбъектОбработки; 
		ЭталонныйЭлемент = пОбъект.ЭталонныйЭлемент.ссылка;			  
		//Если ЭталонныйЭлемент.ДополнительныеСвойства.Свойство("Данные") Тогда   
		//	РеквизитыСтатьиЗатрат = ЭталонныйЭлемент.ДополнительныеСвойства.Данные;  
		//Иначе  
		пМетаданные = нсиУниверсальноеХранилище.ПолучитьМетаданные(ЭталонныйЭлемент.Владелец);  
		Реквизиты = нсиУниверсальноеХранилище.ПолучитьОбъект(пМетаданные,ЭталонныйЭлемент.Ссылка);  
		//КонецЕсли;  
		 
		ЭлементСтатьиЗатрат = Новый Структура;  
					ЭлементСтатьиЗатрат.Вставить("ВидСправочника", "ВидПрочихДоходовИРасходов");  
					ЭлементСтатьиЗатрат.Вставить("ДублирующаяПозиция", Истина);  
					ЭлементСтатьиЗатрат.Вставить("GUID", Строка(пОбъект.GUID));  
					ЭлементСтатьиЗатрат.Вставить("ПометкаУдаления", Реквизиты.ПометкаУдаления);  
					ЭлементСтатьиЗатрат.Вставить("Код", пОбъект.Код);  
					ЭлементСтатьиЗатрат.Вставить("Наименование", Реквизиты.Наименование);				  
					Если ЭталонныйЭлемент.Родитель = неопределено тогда   
						ЭлементСтатьиЗатрат.Вставить("Родитель", "");  
					иначе  
						ЭлементСтатьиЗатрат.Вставить("Родитель", Строка(Реквизиты.Родитель.Наименование));  
					конецесли; 					  
					ЭлементСтатьиЗатрат.Вставить("ЭтоГруппа", Реквизиты.ЭтоГруппа);  
					  
					  
					  
					Если НЕ Реквизиты.ЭтоГруппа Тогда  
						ЭлементСтатьиЗатрат.Вставить("КодВидаОперацииНФО",  ?(ЗначениеЗаполнено(Реквизиты.КодВидаОперацииНФО), Реквизиты.КодВидаОперацииНФО, ""));						  
						ЭлементСтатьиЗатрат.Вставить("НаименованиеВидаОперацииНФО", ?(ЗначениеЗаполнено(Реквизиты.НаименованиеВидаОперацииНФО), Реквизиты.НаименованиеВидаОперацииНФО, ""));  
						ЭлементСтатьиЗатрат.Вставить("ВидДвиженияДенежныхСредств",  ?(ЗначениеЗаполнено(Реквизиты.ВидДвижения), Реквизиты.ВидДвижения.наименование, ""));  
												  
						ЭлементСтатьиЗатрат.Вставить("КодMDM", ЭталонныйЭлемент.Код);  
						ЭлементСтатьиЗатрат.Вставить("MDM_Key", ?(ЗначениеЗаполнено(ЭталонныйЭлемент.MDM_Key), ЭталонныйЭлемент.MDM_Key, ""));  
						//ЭлементСтатьиЗатрат.Вставить("НсиРучная", ЭталонныйЭлемент.нсиРучноеИзменение);  
						ЭлементСтатьиЗатрат.Вставить("КС_Неактуально",  ?(ЗначениеЗаполнено(Реквизиты.КС_Неактуально), Реквизиты.КС_Неактуально, ""));  
						ЭлементСтатьиЗатрат.Вставить("КС_ДатаОкончанияАктуальности", ?(ЗначениеЗаполнено(Реквизиты.КС_ДатаОкончанияАктуальности), Реквизиты.КС_ДатаОкончанияАктуальности, ""));  
						ЭлементСтатьиЗатрат.Вставить("КС_Комментарий", ?(ЗначениеЗаполнено(Реквизиты.КС_Комментарий), Реквизиты.КС_Комментарий, "")); 						  
					КонецЕсли;  
		 
		ЗаписьJson = Новый ЗаписьJSON;  
		ПараметрыЗаписиJson = Новый ПараметрыЗаписиJSON(, Символы.Таб);   
		ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJson);   
		 
		ЗаписатьJSON(ЗаписьJson, ЭлементСтатьиЗатрат);  
		СтрокаJSon = ЗаписьJson.Закрыть();  
		 
		//ОпределитьПолучателейИСоздатьИсходящиеСообщения(ВидСправочника, СтрокаJSon);  
		ВидСправочника = Справочники.нсиВидыСправочников.НайтиПоНаименованию("Статьи движения денежных средств" , Истина);  
		БИТ_ФормированиеСообщений.ОпределитьПолучателейИСоздатьИсходящиеСообщения(ВидСправочника, СтрокаJSon);  
		 
	Конецесли;  
	 
Конецесли;   
УстановитьПривилегированныйРежим(Ложь); 
//---БИТ Нуртдинов 19.11.20  
 
 
 
//////////////////////////////////////////////  
///////////ОТПРАВКА УВЕДОМЛЕНИЙ///////////////  
//////////////////////////////////////////////  
ТекЗадача = Параметры.ЗадачаОбъект;   
ТекЗаявка = Параметры.ЗаявкаОбъект;  
ТекТочкаБП = ТекЗадача.ТочкаМаршрута;  
 
Автор = ТекЗадача.Автор;  
Исполнитель = ТекЗадача.Исполнитель;  
ПредыдущийИсполнитель = ТекЗаявка.ПредыдущийИсполнитель;  
НаименованиеЗадачи = ТекЗадача.Наименование;  
 
СтатусЗаявки = "Неопределено";  
Сообщаем = "Для данного шага не настроено оповещение, обратитесь к администратору";  
 
ОтправитьМодераторам = Ложь; 
Модераторы = Новый Массив; 
 
АвторИсполнитель = Новый Массив; 
АвторИсполнитель.Добавить(Автор); 
 
НомерЗаявки = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(ТекЗаявка.Номер);     
НомерЗадачи = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(ТекЗадача.Номер); 
 
ШаблонСообщения =  
"<HTML xmlns:o = ""urn:schemas-microsoft-com:office:office""><HEAD> 
|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type><LINK rel=stylesheet type=text/css href=""v8help://service_book/service_style""><BASE href=""v8config://94665124-b22a-4db5-ae89-b64479ae1268/mdobject/idf77eafdc-c93d-42c8-a191-be0156e80e0e/038b5c85-fb1c-4082-9c4c-e69f8928bf3a""> 
|<META name=GENERATOR content=""MSHTML 9.00.8112.16443""></HEAD> 
|<BODY> 
|<p><font size=""3"" face=""Calibri"" color=""#1F497D"">Добрый день, _Кому_!</font></p> 
|<p>&nbsp;</p> 
|<p><font face=""Calibri"" size=""3"" color=""#1F497D"">%1</font></p> 
|<p>&nbsp;</p> 
|<p><font size=""3"" face=""Calibri"" color=""#1F497D""> 
|Номер заявки: <strong>%2</strong><br/> 
|Дата создания заявки: %3<br/> 
|Создана задача: %4 %5<br/> 
|Текущий статус заявки: <span style=""color:#ff0000""><strong>%6</strong></span><br/> 
|Текущий исполнитель: <strong>%7</strong></font></p> 
|<p>&nbsp;</p> 
|<p>&nbsp;</p> 
|<p><font size=""2"" face=""Calibri"" color=""#1F497D"">Письмо отправлено автоматической рассылкой информационной базы 1С:МДМ</font></p> 
|"; 
//Параметры шаблона для СтрШаблон - 1:Сообщаем;2:НомерЗаявки;3:ДатаЗаявки;4:НомерЗадачи;5:НаименованиеЗадачи;6:СтатусЗаявки;7:Исполнитель 
	 
ЗаписьЖурналаРегистрации("УВЕДОМЛЕНИЯ", ,,, "ШагБП: " + Строка(ТекЗадача.нсиШагБП) + " ;НомерЭтапаБП: " + Строка(ТекЗадача.нсиНомерЭтапаБП)); 
 
УстановитьПривилегированныйРежим(Истина);      
 
Если ТекЗадача.нсиРезультат = Перечисления.нсиРезультатыВыполненияЗадач.Отклонена Тогда  
	Сообщаем = СтрШаблон("Сообщаем Вам, что Ваша заявка отклонена %1 по причине %2", Строка(Исполнитель), ТекЗадача.РезультатВыполнения); 
	СтатусЗаявки = "Отклонено"; 
	 
	//Модератору не отправляем  
	ОтправитьМодераторам = Истина;  
	СообщаемМодераторам = СтрШаблон("Сообщаем Вам, что заявка %1 отклонена %2 по причине %3", Строка(Автор), Строка(Исполнитель), ТекЗадача.РезультатВыполнения); 
	 
	Запрос = Новый Запрос;   
	Запрос.УстановитьПараметр("БизнесПроцесс", ТекЗадача.БизнесПроцесс);    
	Запрос.УстановитьПараметр("Автор", Автор);  
	Запрос.УстановитьПараметр("Исполнитель", ТекЗадача.Исполнитель);  
	Запрос.Текст =    
	"ВЫБРАТЬ РАЗЛИЧНЫЕ  
	|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель   
	|ИЗ   
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя   
	|ГДЕ   
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс  
	|	И ЗадачаИсполнителя.Выполнена  
	|	И НЕ ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)   
	|	И НЕ ЗадачаИсполнителя.Исполнитель = &Автор  
	|	И НЕ ЗадачаИсполнителя.Исполнитель = &Исполнитель";   
	Выборка = Запрос.Выполнить().Выбрать();   
	Пока Выборка.Следующий() Цикл   
		Модераторы.Добавить(Выборка.Исполнитель);   
	КонецЦикла;
	Исполнитель = "-";       
ИначеЕсли ТекЗадача.нсиШагБП = Перечисления.нсиШагиБП.Утверждение Тогда  
	Если ТекЗадача.нсиНомерЭтапаБП = 1 Тогда  
		Сообщаем = СтрШаблон("Сообщаем Вам, что изменения по Вашей заявке внесены в справочник %1", Строка(ТекЗаявка.ВидЗаявки));  
		СтатусЗаявки = "Согласовано";  
		 
		ОтправитьМодераторам = Истина;  
		СообщаемМодераторам = СтрШаблон("Сообщаем Вам, что изменения по заявке %1 внесены в справочник %2", Строка(Автор), Строка(ТекЗаявка.ВидЗаявки));  
		 
		Запрос = Новый Запрос;   
		Запрос.УстановитьПараметр("БизнесПроцесс", ТекЗадача.БизнесПроцесс);    
		Запрос.УстановитьПараметр("Автор", Автор);  
		Запрос.Текст =    
		"ВЫБРАТЬ РАЗЛИЧНЫЕ  
		|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель   
		|ИЗ   
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя   
		|ГДЕ   
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс  
		|	И ЗадачаИсполнителя.Выполнена  
		|	И НЕ ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)   
		|	И НЕ ЗадачаИсполнителя.Исполнитель = &Автор";   
		Выборка = Запрос.Выполнить().Выбрать();   
		Пока Выборка.Следующий() Цикл   
			Модераторы.Добавить(Выборка.Исполнитель);   
		КонецЦикла;       
	КонецЕсли;  
Иначе  
	//В остальных случаях ничего не отправляем  
	Перейти ~КонецАлгоритма;  
КонецЕсли;  
 
ПараметрыПисьма = Новый Структура;     
Если ТипЗнч(ТекЗадача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.нсиЗаявкаНаИзменение") Тогда      
	ПараметрыПисьма.Вставить("Тема", СтрШаблон("1С:НСИ Заявка №%1 на обработку. Статус: %2", НомерЗаявки, СтатусЗаявки)); 
ИначеЕсли ТипЗнч(ТекЗадача.БизнесПроцесс)<>Тип("БизнесПроцессСсылка.Задание") Тогда      
	ПараметрыПисьма.Вставить("Тема", СтрШаблон("1С:НСИ Справочник ""%1"": Заявка №%2 на обработку. Статус: %3", ТекЗадача.Бизнеспроцесс.ИмяСправочника, НомерЗаявки, СтатусЗаявки)); 
Иначе     
	ПараметрыПисьма.Вставить("Тема", "1С:НСИ Задание на изменение вспомогательного справочника");     
КонецЕсли;     
 
ТелоПисьма = СтрШаблон(ШаблонСообщения, Сообщаем, НомерЗаявки, ТекЗаявка.Дата, НомерЗадачи, ТекЗадача.Наименование, СтатусЗаявки, Строка(Исполнитель)); 
 
ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.HTML); 
ПараметрыПисьма.Вставить("Тело", ТелоПисьма);     
 
ПараметрыУведомления = Новый Структура;  
ПараметрыУведомления.Вставить("ПараметрыПисьма", ПараметрыПисьма);  
ПараметрыУведомления.Вставить("Получатели", АвторИсполнитель);  
 
ВыполнитьАлгоритм(ПараметрыАлгоритма.Параметр1, ОбъектОбработки, ПараметрыУведомления);  
 
Если ОтправитьМодераторам Тогда  
	ПараметрыПисьма = Новый Структура;     
	Если ТипЗнч(ТекЗадача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.нсиЗаявкаНаИзменение") Тогда      
		ПараметрыПисьма.Вставить("Тема", СтрШаблон("1С:НСИ Заявка №%1 на обработку. Статус: %2", НомерЗаявки, СтатусЗаявки)); 
	ИначеЕсли ТипЗнч(ТекЗадача.БизнесПроцесс)<>Тип("БизнесПроцессСсылка.Задание") Тогда      
		ПараметрыПисьма.Вставить("Тема", СтрШаблон("1С:НСИ Справочник ""%1"": Заявка №%2 на обработку. Статус: %3", ТекЗадача.Бизнеспроцесс.ИмяСправочника, НомерЗаявки, СтатусЗаявки)); 
	Иначе     
		ПараметрыПисьма.Вставить("Тема", "1С:НСИ Задание на изменение вспомогательного справочника");     
	КонецЕсли;     
	 
	ТелоПисьма = СтрШаблон(ШаблонСообщения, СообщаемМодераторам, НомерЗаявки, ТекЗаявка.Дата, НомерЗадачи, ТекЗадача.Наименование, СтатусЗаявки, Строка(Исполнитель)); 
	 
	ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.HTML); 
	ПараметрыПисьма.Вставить("Тело", ТелоПисьма);     
	 
	ПараметрыУведомления = Новый Структура;  
	ПараметрыУведомления.Вставить("ПараметрыПисьма", ПараметрыПисьма);  
	ПараметрыУведомления.Вставить("Получатели", Модераторы);  
	 
	ВыполнитьАлгоритм(ПараметрыАлгоритма.Параметр1, ОбъектОбработки, ПараметрыУведомления);  
КонецЕсли;  
 
~КонецАлгоритма:   
 
УстановитьПривилегированныйРежим(Ложь);  

